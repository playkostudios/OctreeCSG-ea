{
  "version": 3,
  "sources": ["../src/math/const-numbers.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat3.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/quat.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec2.js", "../src/math/winding-number.ts", "../src/worker/encode-octree.ts", "../src/math/three-triangle-intersection.ts", "../src/math/Triangle.ts", "../src/math/temp.ts", "../src/math/Plane.ts", "../src/math/Polygon.ts", "../src/math/split-polygon.ts", "../src/math/ray-intersects-triangle.ts", "../src/math/pointRounding.ts", "../src/math/Box3.ts", "../src/math/Ray.ts", "../src/worker/JobError.ts", "../src/base/TriangleHasher.ts", "../src/base/CSGRule.ts", "../src/base/OctreeCSG.ts", "../src/math/Vertex.ts", "../src/worker/decode-octree.ts", "../src/worker.ts"],
  "sourcesContent": ["export const EPSILON = 1e-5;\nexport const INV_EPSILON = 1e5;\nexport const THIRD = 1 / 3;\nexport const TAU = Math.PI * 2;\nexport const HALF_PI = Math.PI / 2;", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "import { EPSILON } from './const-numbers';\n\nimport type { Polygon } from './Polygon';\n\nimport { mat3, vec3 } from 'gl-matrix';\n\n// Winding Number algorithm adapted from https://github.com/grame-cncm/faust/blob/master-dev/tools/physicalModeling/mesh2faust/vega/libraries/windingNumber/windingNumber.cpp\nconst _wV1 = vec3.create();\nconst _wV2 = vec3.create();\nconst _wV3 = vec3.create();\nconst _wP = vec3.create();\nexport const _wP_EPS_ARR = [\n    vec3.fromValues(EPSILON, 0, 0),\n    vec3.fromValues(0, EPSILON, 0),\n    vec3.fromValues(0, 0, EPSILON),\n    vec3.fromValues(-EPSILON, 0, 0),\n    vec3.fromValues(0, -EPSILON, 0),\n    vec3.fromValues(0, 0, -EPSILON)\n];\n\nconst _matrix3 = mat3.create();\nconst wNPI = 4 * Math.PI;\n\nfunction returnXYZ(arr: Float32Array, index: number): vec3 {\n    return arr.slice(index, index + 3);\n}\n\nfunction calcWindingNumber_buffer(trianglesArr: Float32Array, point: vec3) {\n    let wN = 0;\n\n    const trianglesArrLen = trianglesArr.length;\n    for (let i = 0; i < trianglesArrLen; i += 9) {\n        vec3.sub(_wV1, returnXYZ(trianglesArr, i), point);\n        vec3.sub(_wV2, returnXYZ(trianglesArr, i + 3), point);\n        vec3.sub(_wV3, returnXYZ(trianglesArr, i + 6), point);\n\n        const lenA = vec3.length(_wV1);\n        const lenB = vec3.length(_wV2);\n        const lenC = vec3.length(_wV3);\n\n        mat3.set(\n            _matrix3,\n            _wV1[0], _wV2[0], _wV3[0],\n            _wV1[1], _wV2[1], _wV3[1],\n            _wV1[2], _wV2[2], _wV3[2]\n        );\n\n        wN += 2 * Math.atan2(\n            mat3.determinant(_matrix3),\n            lenA * lenB * lenC\n                + vec3.dot(_wV1, _wV2) * lenC\n                + vec3.dot(_wV2, _wV3) * lenA\n                + vec3.dot(_wV1, _wV3) * lenB\n        );\n    }\n\n    return Math.round(wN / wNPI);\n}\n\nexport function polyInside_WindingNumber_buffer(trianglesArr: Float32Array, point: Readonly<vec3>, coplanar: boolean) {\n    vec3.copy(_wP, point);\n\n    if (calcWindingNumber_buffer(trianglesArr, _wP) !== 0) {\n        return true;\n    } else if (coplanar) {\n        for (const _wP_EPS of _wP_EPS_ARR) {\n            vec3.add(_wP, point, _wP_EPS);\n            if (calcWindingNumber_buffer(trianglesArr, _wP) !== 0) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function prepareTriangleBuffer(polygons: Polygon[]) {\n    const array = new Float32Array(polygons.length * 3 * 3);\n\n    let bufferIndex = 0;\n    for (const polygon of polygons) {\n        const triangle = polygon.triangle;\n        array.set(triangle.a, bufferIndex);\n        bufferIndex += 3;\n        array.set(triangle.b, bufferIndex);\n        bufferIndex += 3;\n        array.set(triangle.c, bufferIndex);\n        bufferIndex += 3;\n    }\n\n    return array;\n}", "import { prepareTriangleBuffer } from '../math/winding-number';\n\nimport type { EncodedOctreeCSG } from './EncodedOctreeCSGObject';\nimport type OctreeCSG from '../base/OctreeCSG';\nimport type { Polygon } from '../math/Polygon';\n\nfunction prepareNormalBuffer(polygons: Array<Polygon>) {\n    const array = new Float32Array(polygons.length * 3 * 3);\n\n    let bufferIndex = 0;\n    for (const polygon of polygons) {\n        array.set(polygon.vertices[0].normal, bufferIndex);\n        bufferIndex += 3;\n        array.set(polygon.vertices[1].normal, bufferIndex);\n        bufferIndex += 3;\n        array.set(polygon.vertices[2].normal, bufferIndex);\n        bufferIndex += 3;\n    }\n\n    return array;\n}\n\nexport default function encodeOctree(obj: OctreeCSG, transferables: Array<ArrayBuffer>): EncodedOctreeCSG {\n    const polygons = obj.getPolygons();\n    const vertexBuffer = prepareTriangleBuffer(polygons);\n    transferables.push(vertexBuffer.buffer);\n    const normalBuffer = prepareNormalBuffer(polygons);\n    transferables.push(normalBuffer.buffer);\n    return [vertexBuffer, normalBuffer];\n}", "import type Triangle from './Triangle';\nimport type Line from './Line';\n\nimport { vec2, vec3 } from 'gl-matrix';\n\ninterface Additions {\n    coplanar: boolean,\n    source: vec3,\n    target: vec3,\n}\n\ninterface AdditionsN extends Additions {\n    N1: vec3,\n    N2: vec3,\n}\n\nconst _v1 = vec3.create();\nconst _v2 = vec3.create();\nconst _v3 = vec3.create();\n\n// https://github.com/benardp/contours/blob/master/freestyle/view_map/triangle_triangle_intersection.c\nfunction triangleIntersectsTriangle(triangleA: Triangle, triangleB: Triangle, additionsIn: Additions = { coplanar: false, source: vec3.create(), target: vec3.create() }) {\n    const additions = additionsIn as AdditionsN;\n\n    const p1 = triangleA.a;\n    const q1 = triangleA.b;\n    const r1 = triangleA.c;\n\n    const p2 = triangleB.a;\n    const q2 = triangleB.b;\n    const r2 = triangleB.c;\n\n    // Compute distance signs  of p1, q1 and r1\n    // to the plane of triangleB (p2,q2,r2)\n    vec3.sub(_v1, p2, r2);\n    vec3.sub(_v2, q2, r2);\n    const N2 = vec3.cross(vec3.create(), _v1, _v2);\n\n    vec3.sub(_v1, p1, r2);\n    const dp1 = vec3.dot(_v1, N2);\n    vec3.sub(_v1, q1, r2);\n    const dq1 = vec3.dot(_v1, N2);\n    vec3.sub(_v1, r1, r2);\n    const dr1 = vec3.dot(_v1, N2);\n\n    if (dp1 * dq1 > 0 && dp1 * dr1 > 0) {\n        return false;\n    }\n\n    // Compute distance signs  of p2, q2 and r2\n    // to the plane of triangleA (p1,q1,r1)\n    vec3.sub(_v1, q1, p1);\n    vec3.sub(_v2, r1, p1);\n    const N1 = vec3.cross(vec3.create(), _v1, _v2);\n\n    vec3.sub(_v1, p2, r1);\n    const dp2 = vec3.dot(_v1, N1);\n    vec3.sub(_v1, q2, r1);\n    const dq2 = vec3.dot(_v1, N1);\n    vec3.sub(_v1, r2, r1);\n    const dr2 = vec3.dot(_v1, N1);\n\n    if (dp2 * dq2 > 0 && dp2 * dr2 > 0) {\n        return false;\n    }\n\n    additions.N2 = N2;\n    additions.N1 = N1;\n\n    if (dp1 > 0) {\n        if (dq1 > 0) {\n            return tri_tri_intersection(r1, p1, q1, p2, r2, q2, dp2, dr2, dq2, additions);\n        } else if (dr1 > 0) {\n            return tri_tri_intersection(q1, r1, p1, p2, r2, q2, dp2, dr2, dq2, additions);\n        } else {\n            return tri_tri_intersection(p1, q1, r1, p2, q2, r2, dp2, dq2, dr2, additions);\n        }\n    } else if (dp1 < 0) {\n        if (dq1 < 0) {\n            return tri_tri_intersection(r1, p1, q1, p2, q2, r2, dp2, dq2, dr2, additions);\n        } else if (dr1 < 0) {\n            return tri_tri_intersection(q1, r1, p1, p2, q2, r2, dp2, dq2, dr2, additions);\n        } else {\n            return tri_tri_intersection(p1, q1, r1, p2, r2, q2, dp2, dr2, dq2, additions);\n        }\n    } else if (dq1 < 0) {\n        if (dr1 >= 0) {\n            return tri_tri_intersection(q1, r1, p1, p2, r2, q2, dp2, dr2, dq2, additions);\n        } else {\n            return tri_tri_intersection(p1, q1, r1, p2, q2, r2, dp2, dq2, dr2, additions);\n        }\n    } else if (dq1 > 0) {\n        if (dr1 > 0) {\n            return tri_tri_intersection(p1, q1, r1, p2, r2, q2, dp2, dr2, dq2, additions);\n        } else {\n            return tri_tri_intersection(q1, r1, p1, p2, q2, r2, dp2, dq2, dr2, additions);\n        }\n    } else if (dr1 > 0) {\n        return tri_tri_intersection(r1, p1, q1, p2, q2, r2, dp2, dq2, dr2, additions);\n    } else if (dr1 < 0) {\n        return tri_tri_intersection(r1, p1, q1, p2, r2, q2, dp2, dr2, dq2, additions);\n    } else {\n        // triangles are co-planar\n        additions.coplanar = true;\n        return coplanar_tri_tri3d(p1, q1, r1, p2, q2, r2, N1);\n    }\n}\n\nfunction tri_tri_intersection(p1: Readonly<vec3>, q1: Readonly<vec3>, r1: Readonly<vec3>, p2: Readonly<vec3>, q2: Readonly<vec3>, r2: Readonly<vec3>, dp2: number, dq2: number, dr2: number, additions: AdditionsN) {\n    if (dp2 > 0) {\n        if (dq2 > 0) {\n            return construct_intersection(p1, r1, q1, r2, p2, q2, additions);\n        } else if (dr2 > 0) {\n            return construct_intersection(p1, r1, q1, q2, r2, p2, additions);\n        } else {\n            return construct_intersection(p1, q1, r1, p2, q2, r2, additions);\n        }\n    } else if (dp2 < 0) {\n        if (dq2 < 0) {\n            return construct_intersection(p1, q1, r1, r2, p2, q2, additions);\n        } else if (dr2 < 0) {\n            return construct_intersection(p1, q1, r1, q2, r2, p2, additions);\n        } else {\n            return construct_intersection(p1, r1, q1, p2, q2, r2, additions);\n        }\n    } else if (dq2 < 0) {\n        if (dr2 >= 0) {\n            return construct_intersection(p1, r1, q1, q2, r2, p2, additions);\n        } else {\n            return construct_intersection(p1, q1, r1, p2, q2, r2, additions);\n        }\n    } else if (dq2 > 0) {\n        if (dr2 > 0) {\n            return construct_intersection(p1, r1, q1, p2, q2, r2, additions);\n        } else {\n            return construct_intersection(p1, q1, r1, q2, r2, p2, additions);\n        }\n    } else if (dr2 > 0) {\n        return construct_intersection(p1, q1, r1, r2, p2, q2, additions);\n    } else if (dr2 < 0) {\n        return construct_intersection(p1, r1, q1, r2, p2, q2, additions);\n    } else {\n        additions.coplanar = true;\n        return coplanar_tri_tri3d(p1, q1, r1, p2, q2, r2, additions.N1);\n    }\n}\n\nfunction coplanar_tri_tri3d(p1: Readonly<vec3>, q1: Readonly<vec3>, r1: Readonly<vec3>, p2: Readonly<vec3>, q2: Readonly<vec3>, r2: Readonly<vec3>, normal_1: vec3) {\n    const P1 = vec2.create(), Q1 = vec2.create(), R1 = vec2.create(),\n          P2 = vec2.create(), Q2 = vec2.create(), R2 = vec2.create();\n\n    const n_x = normal_1[0] < 0 ? -normal_1[0] : normal_1[0];\n    const n_y = normal_1[1] < 0 ? -normal_1[1] : normal_1[1];\n    const n_z = normal_1[2] < 0 ? -normal_1[2] : normal_1[2];\n\n    /* Projection of the triangles in 3D onto 2D such that the area of\n    the projection is maximized. */\n\n    // TODO maybe use Float32Array.slice if the source is contiguous\n    if (n_x > n_z && n_x >= n_y) { // Project onto plane YZ\n        P1[0] = q1[2], P1[1] = q1[1];\n        Q1[0] = p1[2], Q1[1] = p1[1];\n        R1[0] = r1[2], R1[1] = r1[1];\n\n        P2[0] = q2[2], P2[1] = q2[1];\n        Q2[0] = p2[2], Q2[1] = p2[1];\n        R2[0] = r2[2], R2[1] = r2[1];\n    } else if (n_y > n_z && n_y >= n_x) { // Project onto plane XZ\n        P1[0] = q1[0], P1[1] = q1[2];\n        Q1[0] = p1[0], Q1[1] = p1[2];\n        R1[0] = r1[0], R1[1] = r1[2];\n\n        P2[0] = q2[0], P2[1] = q2[2];\n        Q2[0] = p2[0], Q2[1] = p2[2];\n        R2[0] = r2[0], R2[1] = r2[2];\n    } else { // Project onto plane XY\n        P1[0] = p1[0], P1[1] = p1[1];\n        Q1[0] = q1[0], Q1[1] = q1[1];\n        R1[0] = r1[0], R1[1] = r1[1];\n\n        P2[0] = p2[0], P2[1] = p2[1];\n        Q2[0] = q2[0], Q2[1] = q2[1];\n        R2[0] = r2[0], R2[1] = r2[1];\n    }\n\n    return tri_tri_overlap_test_2d(P1, Q1, R1, P2, Q2, R2);\n}\n\nfunction tri_tri_overlap_test_2d(p1: vec2, q1: vec2, r1: vec2, p2: vec2, q2: vec2, r2: vec2) {\n    if (ORIENT_2D(p1, q1, r1) < 0) {\n        if (ORIENT_2D(p2, q2, r2) < 0) {\n            return ccw_tri_tri_intersection_2d(p1, r1, q1, p2, r2, q2);\n        } else {\n            return ccw_tri_tri_intersection_2d(p1, r1, q1, p2, q2, r2);\n        }\n    } else if (ORIENT_2D(p2, q2, r2) < 0) {\n        return ccw_tri_tri_intersection_2d(p1, q1, r1, p2, r2, q2);\n    } else {\n        return ccw_tri_tri_intersection_2d(p1, q1, r1, p2, q2, r2);\n    }\n}\n\nfunction ORIENT_2D(a: vec2, b: vec2, c: vec2) {\n    return ((a[0] - c[0]) * (b[1] - c[1]) - (a[1] - c[1]) * (b[0] - c[1]));\n}\n\nfunction ccw_tri_tri_intersection_2d(p1: vec2, q1: vec2, r1: vec2, p2: vec2, q2: vec2, r2: vec2) {\n    if (ORIENT_2D(p2, q2, p1) >= 0) {\n        if (ORIENT_2D(q2, r2, p1) >= 0) {\n            if (ORIENT_2D(r2, p2, p1) >= 0) {\n                return true;\n            } else {\n                return intersection_test_edge(p1, q1, r1, p2, r2);\n            }\n        } else if (ORIENT_2D(r2, p2, p1) >= 0) {\n            return intersection_test_edge(p1, q1, r1, r2, q2);\n        } else {\n            return intersection_test_vertex(p1, q1, r1, p2, q2, r2)\n        }\n    } else if (ORIENT_2D(q2, r2, p1) >= 0) {\n        if (ORIENT_2D(r2, p2, p1) >= 0) {\n            return intersection_test_edge(p1, q1, r2, q2, p2);\n        } else {\n            return intersection_test_vertex(p1, q1, r1, q2, r2, p2);\n        }\n    } else {\n        return intersection_test_vertex(p1, q1, r1, r2, p2, q2);\n    }\n}\n\nfunction intersection_test_edge(P1: vec2, Q1: vec2, R1: vec2, P2: vec2, R2: vec2) {\n    if (ORIENT_2D(R2, P2, Q1) >= 0) {\n        if (ORIENT_2D(P1, P2, Q1) >= 0) {\n            return ORIENT_2D(P1, Q1, R2) >= 0;\n        } else if (ORIENT_2D(Q1, R1, P2) >= 0) {\n            return ORIENT_2D(R1, P1, P2) >= 0;\n        }\n    } else if (ORIENT_2D(R2, P2, R1) >= 0 && ORIENT_2D(P1, P2, R1) >= 0) {\n        return ORIENT_2D(P1, R1, R2) >= 0 || ORIENT_2D(Q1, R1, R2) >= 0;\n    }\n\n    return false;\n}\n\nfunction intersection_test_vertex(P1: vec2, Q1: vec2, R1: vec2, P2: vec2, Q2: vec2, R2: vec2) {\n    if (ORIENT_2D(R2, P2, Q1) >= 0) {\n        if (ORIENT_2D(R2, Q2, Q1) <= 0) {\n            if (ORIENT_2D(P1, P2, Q1) > 0) {\n                return ORIENT_2D(P1, Q2, Q1) <= 0;\n            } else if (ORIENT_2D(P1, P2, R1) >= 0) {\n                return ORIENT_2D(Q1, R1, P2) >= 0;\n            }\n        } else if (ORIENT_2D(P1, Q2, Q1) <= 0 && ORIENT_2D(R2, Q2, R1) <= 0) {\n            return ORIENT_2D(Q1, R1, Q2) >= 0;\n        }\n    } else if (ORIENT_2D(R2, P2, R1) >= 0) {\n        if (ORIENT_2D(Q1, R1, R2) >= 0) {\n            return ORIENT_2D(P1, P2, R1) >= 0;\n        } else if (ORIENT_2D(Q1, R1, Q2) >= 0) {\n            return ORIENT_2D(R2, R1, Q2) >= 0;\n        }\n    }\n\n    return false;\n}\n\nfunction construct_intersection(p1: Readonly<vec3>, q1: Readonly<vec3>, r1: Readonly<vec3>, p2: Readonly<vec3>, q2: Readonly<vec3>, r2: Readonly<vec3>, additions: AdditionsN) {\n    let alpha: number;\n    vec3.sub(_v1, q1, p1);\n    vec3.sub(_v2, r2, p1);\n    const N = vec3.cross(vec3.create(), _v1, _v2);\n    vec3.sub(_v3, p2, p1);\n\n    if (vec3.dot(_v3, N) > 0) {\n        vec3.sub(_v1, r1, p1);\n        vec3.cross(N, _v1, _v2);\n\n        if (vec3.dot(_v3, N) <= 0) {\n            vec3.sub(_v2, q2, p1);\n            vec3.cross(N, _v1, _v2);\n\n            if (vec3.dot(_v3, N) > 0) {\n                vec3.sub(_v1, p1, p2);\n                vec3.sub(_v2, p1, r1);\n                alpha = vec3.dot(_v1, additions.N2) / vec3.dot(_v2, additions.N2);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.source, p1, _v1);\n                vec3.sub(_v1, p2, p1);\n                vec3.sub(_v2, p2, r2);\n                alpha = vec3.dot(_v1, additions.N1) / vec3.dot(_v2, additions.N1);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.target, p2, _v1);\n            }\n            else {\n                vec3.sub(_v1, p2, p1);\n                vec3.sub(_v2, p2, q2);\n                alpha = vec3.dot(_v1, additions.N1) / vec3.dot(_v2, additions.N1);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.source, p2, _v1);\n                vec3.sub(_v1, p2, p1);\n                vec3.sub(_v2, p2, r2);\n                alpha = vec3.dot(_v1, additions.N1) / vec3.dot(_v2, additions.N1);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.target, p2, _v1);\n            }\n\n            return true;\n        }\n    }\n    else {\n        vec3.sub(_v2, q2, p1);\n        vec3.cross(N, _v1, _v2);\n\n        if (vec3.dot(_v3, N) >= 0) {\n            vec3.sub(_v1, r1, p1);\n            vec3.cross(N, _v1, _v2);\n            if (vec3.dot(_v3, N) >= 0) {\n                vec3.sub(_v1, p1, p2);\n                vec3.sub(_v2, p1, r1);\n                alpha = vec3.dot(_v1, additions.N2) / vec3.dot(_v2, additions.N2);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.source, p1, _v1);\n                vec3.sub(_v1, p1, p2);\n                vec3.sub(_v2, p1, q1);\n                alpha = vec3.dot(_v1, additions.N2) / vec3.dot(_v2, additions.N2);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.target, p1, _v1);\n            }\n            else {\n                vec3.sub(_v1, p2, p1);\n                vec3.sub(_v2, p2, q2);\n                alpha = vec3.dot(_v1, additions.N1) / vec3.dot(_v2, additions.N1);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.source, p2, _v1);\n                vec3.sub(_v1, p1, p2);\n                vec3.sub(_v2, p1, q1);\n                alpha = vec3.dot(_v1, additions.N2) / vec3.dot(_v2, additions.N2);\n                vec3.scale(_v1, _v2, alpha);\n                vec3.sub(additions.target, p1, _v1);\n            }\n\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction lineIntersects(line1: Line, line2: Line, points?: vec3[]) {\n    const r = vec3.sub(vec3.create(), line1.end, line1.start);\n    const s = vec3.sub(vec3.create(), line2.end, line2.start);\n    const q = vec3.sub(vec3.create(), line1.start, line2.start);\n\n    const dotqr = vec3.dot(q, r);\n    const dotqs = vec3.dot(q, s);\n    const dotrs = vec3.dot(r, s);\n    const dotrr = vec3.dot(r, r);\n    const dotss = vec3.dot(s, s);\n\n    const denom = (dotrr * dotss) - (dotrs * dotrs);\n    const numer = (dotqs * dotrs) - (dotqr * dotss);\n\n    const t = numer / denom;\n    const u = (dotqs + t * dotrs) / dotss;\n\n    const p0 = vec3.scaleAndAdd(r, line1.start, r, t);\n    const p1 = vec3.scaleAndAdd(s, line2.start, s, u);\n\n    let onSegment = false;\n    let intersects = false;\n\n    if (0 <= t && t <= 1 && 0 <= u && u <= 1) {\n        onSegment = true;\n    }\n\n    const p0p1Length = vec3.distance(p0, p1);\n\n    if (p0p1Length <= 1e-5) {\n        intersects = true;\n    }\n\n    if (!(intersects && onSegment)) {\n        return false;\n    }\n\n    if (points) {\n        points.push(p0, p1);\n    }\n\n    return true;\n}\n\nfunction getLines(triangle: Triangle) {\n    return [\n        <Line>{ start: triangle.a, end: triangle.b },\n        <Line>{ start: triangle.b, end: triangle.c },\n        <Line>{ start: triangle.c, end: triangle.a }\n    ];\n}\n\nfunction checkTrianglesIntersection(triangle1: Triangle, triangle2: Triangle, additions: Additions = { coplanar: false, source: vec3.create(), target: vec3.create() }) {\n    const triangleIntersects = triangleIntersectsTriangle(triangle1, triangle2, additions);\n    if (!triangleIntersects && additions.coplanar) {\n        const triangle1Lines = getLines(triangle1);\n        const triangle2Lines = getLines(triangle2);\n\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                if (lineIntersects(triangle1Lines[i], triangle2Lines[j])) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    return triangleIntersects;\n}\n\nexport { triangleIntersectsTriangle, checkTrianglesIntersection, getLines, lineIntersects };", "import { INV_EPSILON, THIRD } from './const-numbers';\n\nimport { vec3 } from 'gl-matrix';\n\nexport default class Triangle {\n    private _midpoint?: vec3;\n    private _hash?: number;\n\n    constructor(public a: Readonly<vec3>, public b: Readonly<vec3>, public c: Readonly<vec3>) {}\n\n    static copyAuxValues(source: Triangle, destination: Triangle) {\n        if (source._midpoint) {\n            if (destination._midpoint) {\n                vec3.copy(destination._midpoint, source._midpoint);\n            } else {\n                destination._midpoint = vec3.clone(source._midpoint);\n            }\n        }\n\n        if (source._hash) {\n            destination._hash = source._hash;\n        }\n    }\n\n    set(a: Readonly<vec3>, b: Readonly<vec3>, c: Readonly<vec3>) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this._midpoint = undefined;\n        this._hash = undefined;\n    }\n\n    get midpoint(): Readonly<vec3> {\n        // return cached version\n        if (this._midpoint) {\n            return this._midpoint;\n        }\n\n        // no cached version, calculate average point\n        this._midpoint = vec3.clone(this.a);\n        vec3.add(this._midpoint, this._midpoint, this.b);\n        vec3.add(this._midpoint, this._midpoint, this.c);\n        return vec3.scale(this._midpoint, this._midpoint, THIRD);\n    }\n\n    equals(other: Triangle) {\n        return vec3.equals(this.a, other.a) && vec3.equals(this.b, other.b) && vec3.equals(this.c, other.c);\n    }\n\n    private murmur_32_scramble(k: number): number {\n        k *= 0xcc9e2d51;\n        k = (k << 15) | (k >> 17);\n        k *= 0x1b873593;\n        return k & 0xffffffff;\n    }\n\n    private murmur3_32(data: Float32Array, seed: number): number {\n        let h = seed;\n\n        /* Read in groups of 4. */\n        const view = new Uint32Array(data.buffer);\n        for (const key of view) {\n            h ^= this.murmur_32_scramble(key);\n            h = ((h << 13) & 0xffffffff) | (h >> 19);\n            h = (h * 5 + 0xe6546b64) & 0xffffffff;\n        }\n\n        /* Finalize. */\n        h ^= view.byteLength;\n        h ^= h >> 16;\n        h = (h * 0x85ebca6b) & 0xffffffff;\n        h ^= h >> 13;\n        h = (h * 0xc2b2ae35) & 0xffffffff;\n        h ^= h >> 16;\n        return h;\n    }\n\n    get hash(): number {\n        // return cached version\n        if (this._hash !== undefined) {\n            return this._hash;\n        }\n\n        // no cached version, calculate hash\n        const data = new Float32Array([\n            this.a[0] * INV_EPSILON,\n            this.a[1] * INV_EPSILON,\n            this.a[2] * INV_EPSILON,\n            this.b[0] * INV_EPSILON,\n            this.b[1] * INV_EPSILON,\n            this.b[2] * INV_EPSILON,\n            this.c[0] * INV_EPSILON,\n            this.c[1] * INV_EPSILON,\n            this.c[2] * INV_EPSILON\n        ]);\n\n        this._hash = this.murmur3_32(data, 0xea8ed414);\n        return this._hash;\n    }\n}", "import { mat3, mat4, quat, vec2, vec3 } from 'gl-matrix';\n\nexport const tv0 = vec3.create();\nexport const tv1 = vec3.create();\nexport const tv2 = vec3.create();\nexport const tmpm3 = mat3.create();\nexport const tmpm4_0 = mat4.create();\nexport const tmpm4_1 = mat4.create();\nexport const tv0_2 = vec2.create();\nexport const tv1_2 = vec2.create();\nexport const tq0 = quat.create();", "import { tv0, tv1 } from './temp';\n\nimport { vec3, vec4 } from 'gl-matrix';\n\nexport default class Plane {\n    constructor(public buffer: vec4) {}\n\n    static fromNormal(normal: vec3, w: number) {\n        const buffer = vec4.create();\n        vec3.copy(buffer as vec3, normal);\n        buffer[3] = w;\n        return new Plane(buffer);\n    }\n\n    get w(): number {\n        return this.buffer[3];\n    }\n\n    set w(w: number) {\n        this.buffer[3] = w;\n    }\n\n    get unsafeNormal() {\n        // XXX it's unsafe to reuse normals for other purposes. only use this\n        // getter to copy the normal\n        return this.buffer as vec3;\n    }\n\n    clone() {\n        return new Plane(vec4.clone(this.buffer));\n    }\n\n    flip() {\n        vec3.negate(this.buffer as vec3, this.buffer as vec3);\n        this.w = -this.w;\n    }\n\n    delete() {\n        (this.buffer as unknown) = undefined;\n    }\n\n    equals(p: Plane) {\n        return vec4.equals(this.buffer, p.buffer);\n    }\n\n    static calculateNormal(a: Readonly<vec3>, b: Readonly<vec3>, c: Readonly<vec3>): vec3 {\n        vec3.sub(tv0, b, a);\n        vec3.sub(tv1, c, a);\n        vec3.cross(tv0, tv0, tv1);\n        vec3.normalize(tv0, tv0);\n\n        return vec3.clone(tv0);\n    }\n\n    static fromPoints(a: vec3, b: vec3, c: vec3) {\n        const n = Plane.calculateNormal(a, b, c);\n        return Plane.fromNormal(n, vec3.dot(n, a));\n    }\n}", "import Triangle from './Triangle';\nimport { tmpm3 } from './temp';\nimport Plane from './Plane';\n\nimport type Vertex from './Vertex';\n\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nlet _polygonID = 0;\n\nexport enum PolygonState {\n    Undecided,\n    Inside,\n    Outside,\n    CoplanarBack,\n    CoplanarFront,\n}\n\nexport class Polygon {\n    id: number;\n    vertices: Vertex[];\n    shared?: number;\n    plane: Plane;\n    triangle: Triangle;\n    intersects = false;\n    state = PolygonState.Undecided;\n    previousState = PolygonState.Undecided;\n    previousStates: PolygonState[] = [];\n    valid = true;\n    coplanar = false;\n    originalValid = false;\n    newPolygon = false;\n\n    constructor(vertices: Vertex[], shared?: number) {\n        this.id = _polygonID++;\n        this.vertices = vertices.map(v => v.clone());\n        this.shared = shared;\n        this.plane = Plane.fromPoints(this.vertices[0].pos, this.vertices[1].pos, this.vertices[2].pos);\n        this.triangle = new Triangle(this.vertices[0].pos, this.vertices[1].pos, this.vertices[2].pos);\n    }\n\n    get midpoint() {\n        return this.triangle.midpoint;\n    }\n\n    applyMatrix(matrix: mat4, normalMatrixIn?: mat3) {\n        const normalMatrix = normalMatrixIn || mat3.normalFromMat4(tmpm3, matrix);\n\n        this.vertices.forEach(v => {\n            vec3.transformMat4(v.pos, v.pos, matrix);\n            vec3.transformMat3(v.normal, v.normal, normalMatrix);\n        });\n\n        this.plane.delete();\n        this.plane = Plane.fromPoints(this.vertices[0].pos, this.vertices[1].pos, this.vertices[2].pos);\n        this.triangle.set(this.vertices[0].pos, this.vertices[1].pos, this.vertices[2].pos);\n    }\n\n    reset(resetOriginal = true) {\n        this.intersects = false;\n        this.state = PolygonState.Undecided;\n        this.previousState = PolygonState.Undecided;\n        this.previousStates.length = 0;\n        this.valid = true;\n        this.coplanar = false;\n        resetOriginal && (this.originalValid = false);\n        this.newPolygon = false;\n    }\n\n    setState(state: PolygonState, keepState?: PolygonState) {\n        if (this.state === keepState) {\n            return;\n        }\n\n        this.previousState = this.state;\n        this.state !== PolygonState.Undecided && this.previousStates.push(this.state);\n        this.state = state;\n    }\n\n    checkAllStates(state: PolygonState) {\n        if (this.state !== state || (this.previousState !== state && this.previousState !== PolygonState.Undecided)) {\n            return false;\n        }\n\n        for (const previousState of this.previousStates) {\n            if (previousState !== state) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    setInvalid() {\n        this.valid = false;\n    }\n\n    setValid() {\n        this.valid = true;\n    }\n\n    clone() {\n        const polygon = new Polygon(this.vertices.map(v => v.clone()), this.shared);\n        polygon.intersects = this.intersects;\n        polygon.valid = this.valid;\n        polygon.coplanar = this.coplanar;\n        polygon.state = this.state;\n        polygon.originalValid = this.originalValid;\n        polygon.newPolygon = this.newPolygon;\n        polygon.previousState = this.previousState;\n        polygon.previousStates = this.previousStates.slice();\n\n        Triangle.copyAuxValues(this.triangle, polygon.triangle);\n\n        return polygon;\n    }\n\n    flip() {\n        this.vertices.reverse().forEach(v => v.flip());\n        const tmp = this.triangle.a;\n        this.triangle.a = this.triangle.c;\n        this.triangle.c = tmp;\n        this.plane.flip();\n    }\n\n    delete() {\n        this.vertices.forEach(v => v.delete());\n        this.vertices.length = 0;\n\n        if (this.plane) {\n            this.plane.delete();\n            (this.plane as unknown) = undefined;\n        }\n\n        (this.triangle as unknown) = undefined;\n        this.shared = undefined;\n        this.setInvalid();\n    }\n}", "import { Polygon, PolygonState } from './Polygon';\nimport { EPSILON } from './const-numbers';\nimport { tv0 } from './temp';\n\nimport type Vertex from './Vertex';\nimport type Plane from './Plane';\n\nimport { vec3 } from 'gl-matrix';\n\nexport enum ReturnPolygonType {\n    Undecided = PolygonState.Undecided,\n    Back,\n    Front,\n    CoplanarBack = PolygonState.CoplanarBack,\n    CoplanarFront = PolygonState.CoplanarFront,\n}\n\ninterface ReturnPolygon {\n    polygon: Polygon,\n    type: ReturnPolygonType\n}\n\nconst COPLANAR = 0;\nconst FRONT = 1;\nconst BACK = 2;\nconst SPANNING = 3;\n\nexport function splitPolygonByPlane(polygon: Polygon, plane: Plane, result: ReturnPolygon[] = []) {\n    const returnPolygon = <ReturnPolygon>{\n        polygon: polygon,\n        type: ReturnPolygonType.Undecided\n    };\n\n    let polygonType = 0;\n    const types = [];\n\n    for (const vertex of polygon.vertices) {\n        const t = vec3.dot(plane.unsafeNormal, vertex.pos) - plane.w;\n        const type = (t < -EPSILON) ? BACK : (t > EPSILON) ? FRONT : COPLANAR;\n        polygonType |= type;\n        types.push(type);\n    }\n\n    switch (polygonType) {\n        case COPLANAR:\n            returnPolygon.type = vec3.dot(plane.unsafeNormal, polygon.plane.unsafeNormal) > 0 ? ReturnPolygonType.CoplanarFront : ReturnPolygonType.CoplanarBack;\n            result.push(returnPolygon);\n            break;\n        case FRONT:\n            returnPolygon.type = ReturnPolygonType.Front;\n            result.push(returnPolygon);\n            break;\n        case BACK:\n            returnPolygon.type = ReturnPolygonType.Back;\n            result.push(returnPolygon);\n            break;\n        case SPANNING:\n        {\n            const f = [];\n            const b = [];\n\n            const vertCount = polygon.vertices.length;\n            for (let i = 0; i < vertCount; i++) {\n                const j = (i + 1) % vertCount;\n                const ti = types[i];\n                const tj = types[j];\n                const vi = polygon.vertices[i];\n                const vj = polygon.vertices[j];\n\n                if (ti !== BACK) {\n                    f.push(vi);\n                }\n\n                if (ti !== FRONT) {\n                    b.push(ti != BACK ? vi.clone() : vi);\n                }\n\n                if ((ti | tj) === SPANNING) {\n                    vec3.sub(tv0, vj.pos, vi.pos);\n                    const t = (plane.w - vec3.dot(plane.unsafeNormal, vi.pos)) / vec3.dot(plane.unsafeNormal, tv0);\n                    const v = vi.interpolate(vj, t);\n                    f.push(v);\n                    b.push(v.clone());\n                }\n            }\n\n            if (f.length > 3) {\n                for (const newPoly of splitPolygonArr(f)) {\n                    result.push({\n                        polygon: new Polygon(newPoly, polygon.shared),\n                        type: ReturnPolygonType.Front\n                    });\n                }\n            } else if (f.length === 3) {\n                result.push({\n                    polygon: new Polygon(f, polygon.shared),\n                    type: ReturnPolygonType.Front\n                });\n            }\n\n            if (b.length > 3) {\n                for (const newPoly of splitPolygonArr(b)) {\n                    result.push({\n                        polygon: new Polygon(newPoly, polygon.shared),\n                        type: ReturnPolygonType.Back\n                    });\n                }\n            } else if (b.length === 3) {\n                result.push({\n                    polygon: new Polygon(b, polygon.shared),\n                    type: ReturnPolygonType.Back\n                });\n            }\n\n            break;\n        }\n    }\n\n    if (result.length == 0) {\n        result.push(returnPolygon);\n    }\n\n    return result;\n}\n\nfunction splitPolygonArr(arr: Vertex[]) {\n    const resultArr = [];\n\n    if (arr.length > 4) {\n        console.warn(`[splitPolygonArr] arr.length (${arr.length}) > 4`);\n        for (let j = 3; j <= arr.length; j++) {\n            resultArr.push([\n                arr[0].clone(), arr[j - 2].clone(), arr[j - 1].clone()\n            ]);\n        }\n    } else if (vec3.squaredDistance(arr[0].pos, arr[2].pos) <= vec3.squaredDistance(arr[1].pos, arr[3].pos)) {\n        resultArr.push(\n            [arr[0].clone(), arr[1].clone(), arr[2].clone()],\n            [arr[0].clone(), arr[2].clone(), arr[3].clone()]\n        );\n    } else {\n        resultArr.push(\n            [arr[0].clone(), arr[1].clone(), arr[3].clone()],\n            [arr[1].clone(), arr[2].clone(), arr[3].clone()]\n        );\n    }\n\n    return resultArr;\n}", "import type Triangle from './Triangle';\nimport type Ray from './Ray';\n\nimport { vec3 } from 'gl-matrix';\n\nconst edge1 = vec3.create();\nconst edge2 = vec3.create();\nconst h = vec3.create();\nconst s = vec3.create();\nconst q = vec3.create();\nconst RAY_EPSILON = 1e-7;\n\nexport default function rayIntersectsTriangle(ray: Ray, triangle: Triangle, target = vec3.create()) {\n    // XXX a big chunk of the computation time is spent here. it would be nice\n    // to have a faster intersection algorithm. for example, we already have\n    // pre-calculated triangle normals. maybe find a way to reuse them?\n\n    // https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n    vec3.sub(edge1, triangle.b, triangle.a);\n    vec3.sub(edge2, triangle.c, triangle.a);\n    vec3.cross(h, ray.direction, edge2);\n\n    const a = vec3.dot(edge1, h);\n    if (a > -RAY_EPSILON && a < RAY_EPSILON) {\n        return null; // Ray is parallel to the triangle\n    }\n\n    vec3.sub(s, ray.origin, triangle.a);\n\n    const f = 1 / a;\n    const u = f * vec3.dot(s, h);\n    if (u < 0 || u > 1) {\n        return null;\n    }\n\n    vec3.cross(q, s, edge1);\n\n    const v = f * vec3.dot(ray.direction, q);\n    if (v < 0 || u + v > 1) {\n        return null;\n    }\n\n    // Check where intersection is\n    const t = f * vec3.dot(edge2, q);\n    if (t > RAY_EPSILON) {\n        return vec3.scaleAndAdd(target, ray.origin, ray.direction, t);\n    }\n\n    return null;\n}", "import type { vec3 } from 'gl-matrix';\n\nexport default function pointRounding(point: vec3, num = 15) {\n    point[0] = +point[0].toFixed(num);\n    point[1] = +point[1].toFixed(num);\n    point[2] = +point[2].toFixed(num);\n    return point;\n}", "import Plane from './Plane';\n\nimport type Triangle from './Triangle';\nimport type Ray from './Ray';\n\nimport { vec3 } from 'gl-matrix';\n\nconst _tv1 = vec3.create();\nconst _tv2 = vec3.create();\nconst _tv3 = vec3.create();\n\n// 3 main axis of an AABB\nconst _bxNorm: Readonly<vec3> = vec3.fromValues(1, 0, 0);\nconst _byNorm: Readonly<vec3> = vec3.fromValues(0, 1, 0);\nconst _bzNorm: Readonly<vec3> = vec3.fromValues(0, 0, 1);\n\n// temp variables for box vertices. Up, Down, Left, Right, Back (-z), Front (+z)\nconst _lub = vec3.create();\nconst _rub = vec3.create();\nconst _luf = vec3.create();\nconst _ruf = vec3.create();\nconst _ldb = vec3.create();\nconst _rdb = vec3.create();\nconst _ldf = vec3.create();\nconst _rdf = vec3.create();\n\n// temp variables for triangle edges\nconst _ba = vec3.create();\nconst _cb = vec3.create();\nconst _ac = vec3.create();\n\nexport default class Box3 {\n    constructor(public min = vec3.create(), public max = vec3.create()) {}\n\n    clone(): Box3 {\n        return new Box3(vec3.clone(this.min), vec3.clone(this.max));\n    }\n\n    expandByPoint(point: Readonly<vec3>) {\n        vec3.min(this.min, this.min, point);\n        vec3.max(this.max, this.max, point);\n    }\n\n    expandByScalar(scalar: number) {\n        vec3.set(_tv1, scalar, scalar, scalar);\n        vec3.sub(this.min, this.min, _tv1);\n        vec3.add(this.max, this.max, _tv1);\n    }\n\n    private _project(points: Readonly<Readonly<vec3>[]>, normal: Readonly<vec3>): [min: number, max: number] {\n        const count = points.length;\n        let min = vec3.dot(points[0], normal);\n        let max = min;\n\n        for (let i = 1; i < count; i++) {\n            const dotProd = vec3.dot(points[i], normal);\n            min = Math.min(min, dotProd);\n            max = Math.max(max, dotProd);\n        }\n\n        return [min, max];\n    }\n\n    private _testNormal(boxAxisMin: number, boxAxisMax: number, normal: Readonly<vec3>, vertices: Readonly<Readonly<vec3>[]>): boolean {\n        const [min, max] = this._project(vertices, normal);\n        return max < boxAxisMin || min > boxAxisMax;\n    }\n\n    private _testECP(triEdge: Readonly<vec3>, boxNormal: Readonly<vec3>, triVerts: Readonly<Readonly<vec3>[]>, boxVerts: Readonly<Readonly<vec3>[]>): boolean {\n        const axis = vec3.cross(_tv1, triEdge, boxNormal);\n        const [boxMin, boxMax] = this._project(boxVerts, axis);\n        const [triMin, triMax] = this._project(triVerts, axis);\n        return boxMax < triMin || boxMin > triMax;\n    }\n\n    intersectsTriangle(triangle: Triangle): boolean {\n        // AABB and triangle intersection algorithm from:\n        // https://stackoverflow.com/a/17503268\n        // using fix from:\n        // https://stackoverflow.com/a/23456651\n\n        // test box normals\n        const triVerts = [triangle.a, triangle.b, triangle.c];\n\n        if (\n            this._testNormal(this.min[0], this.max[0], _bxNorm, triVerts) ||\n            this._testNormal(this.min[1], this.max[1], _byNorm, triVerts) ||\n            this._testNormal(this.min[2], this.max[2], _bzNorm, triVerts)\n        ) {\n            return false;\n        }\n\n        // test triangle normal\n        const triNorm = Plane.calculateNormal(triangle.a, triangle.b, triangle.c);\n        const triOffset = vec3.dot(triNorm, triangle.a);\n        const boxVerts = [\n            vec3.set(_lub, this.min[0], this.max[1], this.min[2]),\n            vec3.set(_rub, this.max[0], this.max[1], this.min[2]),\n            vec3.set(_luf, this.min[0], this.max[1], this.max[2]),\n            vec3.set(_ruf, this.max[0], this.max[1], this.max[2]),\n            vec3.set(_ldb, this.min[0], this.min[1], this.min[2]),\n            vec3.set(_rdb, this.max[0], this.min[1], this.min[2]),\n            vec3.set(_ldf, this.min[0], this.min[1], this.max[2]),\n            vec3.set(_rdf, this.max[0], this.min[1], this.max[2])\n        ];\n\n        const [boxMin, boxMax] = this._project(boxVerts, triNorm);\n        if (boxMax < triOffset || boxMin > triOffset) {\n            return false;\n        }\n\n        // test nine edge cross-products\n        vec3.sub(_ba, triangle.a, triangle.b);\n        vec3.sub(_cb, triangle.b, triangle.c);\n        vec3.sub(_ac, triangle.c, triangle.a);\n\n        return !(\n            this._testECP(_ba, _bxNorm, triVerts, boxVerts) ||\n            this._testECP(_ba, _byNorm, triVerts, boxVerts) ||\n            this._testECP(_ba, _bzNorm, triVerts, boxVerts) ||\n            this._testECP(_cb, _bxNorm, triVerts, boxVerts) ||\n            this._testECP(_cb, _byNorm, triVerts, boxVerts) ||\n            this._testECP(_cb, _bzNorm, triVerts, boxVerts) ||\n            this._testECP(_ac, _bxNorm, triVerts, boxVerts) ||\n            this._testECP(_ac, _byNorm, triVerts, boxVerts) ||\n            this._testECP(_ac, _bzNorm, triVerts, boxVerts)\n        );\n    }\n\n    intersectsBox(box: Box3): boolean {\n        return !(\n            this.min[0] > box.max[0] || this.max[0] < box.min[0] ||\n            this.min[1] > box.max[1] || this.max[1] < box.min[1] ||\n            this.min[2] > box.max[2] || this.max[2] < box.min[2]\n        );\n    }\n\n    intersectsRay(ray: Ray): boolean {\n        // AABB and line intersection algorithm from:\n        // https://tavianator.com/2022/ray_box_boundary.html\n        // adapted to handle directional rays instead of bi-directional lines\n\n        // dir_inv\n        vec3.inverse(_tv3, ray.direction);\n\n        // t1\n        vec3.sub(_tv1, this.min, ray.origin);\n        vec3.mul(_tv1, _tv1, _tv3);\n\n        // t2\n        vec3.sub(_tv2, this.max, ray.origin);\n        vec3.mul(_tv2, _tv2, _tv3);\n\n        const tmax = Math.max(_tv1[0], _tv2[0], _tv1[1], _tv2[1], _tv1[2], _tv2[2]);\n        if (tmax < 0) {\n            return false;\n        }\n\n        const tmin = Math.min(_tv1[0], _tv2[0], _tv1[1], _tv2[1], _tv1[2], _tv2[2]);\n        return tmin <= tmax;\n    }\n\n    containsPoint(point: Readonly<vec3>): boolean {\n        return point[0] >= this.min[0] && point[0] <= this.max[0]\n            && point[1] >= this.min[1] && point[1] <= this.max[1]\n            && point[2] >= this.min[2] && point[2] <= this.max[2];\n    }\n\n    makeEmpty() {\n        vec3.set(this.min, 0, 0, 0);\n        vec3.set(this.max, 0, 0, 0);\n    }\n}", "import { vec3 } from 'gl-matrix';\n\nexport default class Ray {\n    origin = vec3.create();\n    direction = vec3.fromValues(0, 0, -1);\n}", "export enum JobFailReason {\n    WorkerCreationFailure,\n    OperationFailure,\n    DecodeFailure,\n}\n\nexport class JobError extends Error {\n    constructor(public failReason: JobFailReason, public originalError: string) {\n        let failMessage: string;\n\n        switch(failReason) {\n            case JobFailReason.WorkerCreationFailure:\n                failMessage = 'Job failed (worker creation failed)';\n                break;\n            case JobFailReason.OperationFailure:\n                failMessage = 'Job failed (operation exception)';\n                break;\n            default:\n                failMessage = 'Job failed (decode failure)';\n        }\n\n        super(`${failMessage}: ${originalError}`);\n    }\n\n    static WorkerCreationFailure(originalError: unknown) {\n        return new JobError(JobFailReason.WorkerCreationFailure, '' + originalError);\n    }\n\n    static OperationFailure(originalError: unknown) {\n        return new JobError(JobFailReason.OperationFailure, '' + originalError);\n    }\n\n    static DecodeFailure(originalError: unknown) {\n        return new JobError(JobFailReason.DecodeFailure, '' + originalError);\n    }\n}", "import type Triangle from '../math/Triangle';\n\nexport default class TriangleHasher {\n    buckets = new Map<number, Triangle[]>;\n    // buckets = new Set<string>();\n\n    isUnique(triangle: Triangle) {\n        const hash = triangle.hash;\n        let arr = this.buckets.get(hash);\n\n        if (arr) {\n            for (const other of arr) {\n                if (triangle.equals(other)) {\n                    return false;\n                }\n            }\n\n            arr.push(triangle);\n        } else {\n            arr = [triangle];\n        }\n\n        return true;\n\n        // const hash1 = `{${triangle.a[0]},${triangle.a[1]},${triangle.a[2]}}-{${triangle.b[0]},${triangle.b[1]},${triangle.b[2]}}-{${triangle.c[0]},${triangle.c[1]},${triangle.c[2]}}`;\n\n        // if (this.buckets.has(hash1)) {\n        //     return false;\n        // } else {\n        //     this.buckets.add(hash1);\n        //     return true;\n        // }\n    }\n\n    clear() {\n        this.buckets.clear();\n    }\n}", "import { PolygonState } from '../math/Polygon';\n\ntype CSGRule = {\n    array: true,\n    rule: PolygonState[]\n} | {\n    array: false,\n    rule: PolygonState\n};\n\nexport type CSGRulesArray = CSGRule[];\n\nexport const CSG_Rules = {\n    union: {\n        a: <CSGRulesArray>[\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarBack]\n            },\n            {\n                array: false,\n                rule: PolygonState.Inside\n            }\n        ],\n        b: <CSGRulesArray>[\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarBack]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarFront]\n            },\n            {\n                array: false,\n                rule: PolygonState.Inside\n            }\n        ]\n    },\n    subtract: {\n        a: <CSGRulesArray>[\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarBack]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarFront]\n            },\n            {\n                array: false,\n                rule: PolygonState.Inside\n            }\n        ],\n        b: <CSGRulesArray>[\n            {\n                array: true,\n                rule: [PolygonState.Outside, PolygonState.CoplanarBack]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Outside, PolygonState.CoplanarFront]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarFront]\n            },\n            {\n                array: false,\n                rule: PolygonState.Outside\n            }\n        ]\n    },\n    intersect: {\n        a: <CSGRulesArray>[\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarBack]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Outside, PolygonState.CoplanarFront]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Outside, PolygonState.CoplanarBack]\n            },\n            {\n                array: false,\n                rule: PolygonState.Outside\n            }\n        ],\n        b: <CSGRulesArray>[\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarFront]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Inside, PolygonState.CoplanarBack]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Outside, PolygonState.CoplanarFront]\n            },\n            {\n                array: true,\n                rule: [PolygonState.Outside, PolygonState.CoplanarBack]\n            },\n            {\n                array: false,\n                rule: PolygonState.Outside\n            }\n        ]\n    }\n};", "import { polyInside_WindingNumber_buffer, _wP_EPS_ARR, prepareTriangleBuffer } from '../math/winding-number';\nimport { checkTrianglesIntersection } from '../math/three-triangle-intersection';\nimport { ReturnPolygonType, splitPolygonByPlane } from '../math/split-polygon';\nimport rayIntersectsTriangle from '../math/ray-intersects-triangle';\nimport pointRounding from '../math/pointRounding';\nimport { EPSILON } from '../math/const-numbers';\nimport { PolygonState } from '../math/Polygon';\nimport { tmpm3 } from '../math/temp';\nimport Box3 from '../math/Box3';\nimport Ray from '../math/Ray';\n\nimport type { Polygon } from '../math/Polygon';\nimport type Triangle from '../math/Triangle';\n\nimport { JobError, JobFailReason } from '../worker/JobError';\nimport TriangleHasher from './TriangleHasher';\nimport { CSG_Rules } from './CSGRule';\n\nimport type { OctreeCSGObject } from './OctreeCSGObject';\nimport type { CSGRulesArray } from './CSGRule';\n\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst _v1 = vec3.create();\nconst _v2 = vec3.create();\nconst _v3 = vec3.create();\n\nconst _ray = new Ray();\nconst _rayDirection = vec3.fromValues(0, 0, 1);\n\ninterface RayIntersect {\n    distance: number,\n    polygon: Polygon,\n    position: vec3\n}\n\nexport default class OctreeCSG {\n    protected polygons: Polygon[];\n    protected replacedPolygons: Polygon[];\n    protected box?: Box3;\n    protected subTrees: OctreeCSG[];\n    protected parent: OctreeCSG | null;\n    protected level: number;\n    protected polygonArrays: Polygon[][];\n\n    static disposeOctree = true;\n    static useWindingNumber = false;\n    static maxLevel = 16;\n    static polygonsPerTree = 100;\n\n    constructor(box?: Box3, parent: OctreeCSG | null = null) {\n        this.polygons = [];\n        this.replacedPolygons = [];\n        this.box = box;\n        this.subTrees = [];\n        this.parent = parent;\n        this.level = 0;\n        this.polygonArrays = [];\n        this.addPolygonsArrayToRoot(this.polygons);\n    }\n\n    clone() {\n        return new OctreeCSG().copy(this);\n    }\n\n    copy(source: OctreeCSG) {\n        this.deletePolygonsArrayFromRoot(this.polygons);\n        this.polygons = source.polygons.map(p => p.clone());\n        this.addPolygonsArrayToRoot(this.polygons);\n\n        this.replacedPolygons = source.replacedPolygons.map(p => p.clone());\n        this.box = source.box?.clone();\n        this.level = source.level;\n\n        for (const subTree of source.subTrees) {\n            this.subTrees.push(new OctreeCSG(undefined, this).copy(subTree));\n        }\n\n        return this;\n    }\n\n    protected addPolygonsArrayToRoot(array: Polygon[]) {\n        if (this.parent) {\n            this.parent.addPolygonsArrayToRoot(array);\n        } else {\n            this.polygonArrays.push(array);\n        }\n    }\n\n    protected deletePolygonsArrayFromRoot(array: Polygon[]) {\n        if (this.parent) {\n            this.parent.deletePolygonsArrayFromRoot(array);\n        } else {\n            const index = this.polygonArrays.indexOf(array);\n\n            if (index > -1) {\n                this.polygonArrays.splice(index, 1);\n            }\n        }\n    }\n\n    isEmpty() {\n        return this.polygons.length === 0;\n    }\n\n    addPolygon(polygon: Polygon, triangleHasher?: TriangleHasher) {\n        const triangle = polygon.triangle;\n\n        if (triangleHasher && !triangleHasher.isUnique(triangle)) {\n            return this;\n        }\n\n        if (this.box) {\n            this.box.min[0] = Math.min(this.box.min[0], triangle.a[0], triangle.b[0], triangle.c[0]);\n            this.box.min[1] = Math.min(this.box.min[1], triangle.a[1], triangle.b[1], triangle.c[1]);\n            this.box.min[2] = Math.min(this.box.min[2], triangle.a[2], triangle.b[2], triangle.c[2]);\n            this.box.max[0] = Math.max(this.box.max[0], triangle.a[0], triangle.b[0], triangle.c[0]);\n            this.box.max[1] = Math.max(this.box.max[1], triangle.a[1], triangle.b[1], triangle.c[1]);\n            this.box.max[2] = Math.max(this.box.max[2], triangle.a[2], triangle.b[2], triangle.c[2]);\n        } else {\n            this.box = new Box3();\n            this.box.min[0] = Math.min(triangle.a[0], triangle.b[0], triangle.c[0]);\n            this.box.min[1] = Math.min(triangle.a[1], triangle.b[1], triangle.c[1]);\n            this.box.min[2] = Math.min(triangle.a[2], triangle.b[2], triangle.c[2]);\n            this.box.max[0] = Math.max(triangle.a[0], triangle.b[0], triangle.c[0]);\n            this.box.max[1] = Math.max(triangle.a[1], triangle.b[1], triangle.c[1]);\n            this.box.max[2] = Math.max(triangle.a[2], triangle.b[2], triangle.c[2]);\n        }\n\n        this.polygons.push(polygon);\n        return this;\n    }\n\n    protected split(level: number) {\n        if (!this.box) {\n            throw new Error('Octree has no box');\n        }\n\n        const subTrees = [];\n        vec3.sub(_v2, this.box.max, this.box.min);\n        const halfsize = vec3.scale(_v2, _v2, 0.5);\n        for (let x = 0; x < 2; x++) {\n            for (let y = 0; y < 2; y++) {\n                for (let z = 0; z < 2; z++) {\n                    const box = new Box3();\n                    const v = vec3.set(_v1, x, y, z);\n\n                    vec3.multiply(_v3, v, halfsize);\n                    vec3.add(box.min, this.box.min, _v3);\n                    vec3.add(box.max, box.min, halfsize);\n                    box.expandByScalar(EPSILON);\n                    subTrees.push(new OctreeCSG(box, this));\n                }\n            }\n        }\n\n        let polygon;\n        while ((polygon = this.polygons.pop())) { // XXX assignment is on purpose\n            let found = false;\n            for (let i = 0; i < subTrees.length; i++) {\n                const subTree = subTrees[i];\n                const subBox = subTree.box;\n\n                if (!subBox) {\n                    throw new Error('Subtree has no box');\n                }\n\n                if (subBox.containsPoint(polygon.midpoint)) {\n                    subTree.polygons.push(polygon);\n                    found = true;\n                }\n            }\n\n            if (!found) {\n                console.error('ERROR: unable to find subtree for:', polygon.triangle);\n                throw new Error(`Unable to find subtree for triangle at level ${level}`);\n            }\n        }\n\n        for (const subTree of subTrees) {\n            subTree.level = level + 1;\n            const len = subTree.polygons.length;\n\n            if (len > OctreeCSG.polygonsPerTree && level < OctreeCSG.maxLevel) {\n                subTree.split(level + 1);\n\n            }\n            this.subTrees.push(subTree);\n        }\n\n        return this;\n    }\n\n    buildTree() {\n        this.split(0);\n        this.processTree();\n\n        return this;\n    }\n\n    protected processTree() {\n        if (!this.isEmpty()) {\n            if (!this.box) {\n                this.box = new Box3();\n            }\n\n            const firstPolygon = this.polygons[0];\n            const firstVertex = firstPolygon.triangle.a;\n            vec3.copy(this.box.min, firstVertex);\n            vec3.copy(this.box.max, firstVertex);\n\n            for (const polygon of this.polygons) {\n                this.box.expandByPoint(polygon.triangle.a);\n                this.box.expandByPoint(polygon.triangle.b);\n                this.box.expandByPoint(polygon.triangle.c);\n            }\n\n            this.expandParentBox();\n        }\n\n        for (const subTree of this.subTrees) {\n            subTree.processTree();\n        }\n    }\n\n    protected expandParentBox() {\n        if (this.parent) {\n            if (!this.box) {\n                throw new Error('Octree has no box');\n            }\n\n            if (!this.parent.box) {\n                throw new Error('Octree\\'s parent has no box');\n            }\n\n            this.parent.box.expandByPoint(this.box.min);\n            this.parent.box.expandByPoint(this.box.max);\n            this.parent.expandParentBox();\n        }\n    }\n\n    getPolygonsIntersectingPolygon(targetPolygon: Polygon, polygons: Polygon[] = []) {\n        if (!this.box) {\n            throw new Error('Octree has no box');\n        }\n\n        if (this.polygons.length > 0 && this.box.intersectsTriangle(targetPolygon.triangle)) {\n            handlePolygonArrayIntersections(targetPolygon, polygons, this.polygons);\n            handlePolygonArrayIntersections(targetPolygon, polygons, this.replacedPolygons);\n        }\n\n        for (const subTree of this.subTrees) {\n            subTree.getPolygonsIntersectingPolygon(targetPolygon, polygons);\n        }\n\n        return polygons;\n    }\n\n    getRayPolygons(ray: Ray, polygons?: Set<Polygon>) {\n        // XXX if the replaced polygons array are not creating a new set, then\n        // using a set is actually slower than using an array and calling\n        // indexOf. when an API such as Set.addAll is added, then using a set\n        // will always be faster than an array. the average case\n\n        if (polygons) {\n            for (const replacedPolygon of this.replacedPolygons) {\n                polygons.add(replacedPolygon);\n            }\n        } else {\n            polygons = new Set(this.replacedPolygons);\n        }\n\n        for (const polygon of this.polygons) {\n            if (polygon.valid && polygon.originalValid) {\n                polygons.add(polygon);\n            }\n        }\n\n        for (const subTree of this.subTrees) {\n            if ((subTree.box as Box3).intersectsRay(ray)) {\n                subTree.getRayPolygons(ray, polygons);\n            }\n        }\n\n        return polygons;\n    }\n\n    rayIntersect(ray: Ray, intersects: RayIntersect[] = []) {\n        if (vec3.squaredLength(ray.direction) === 0) return [];\n\n        let distance = 1e100;\n\n        for (const polygon of this.getRayPolygons(ray)) {\n            // MollerTrumbore\n            const result = rayIntersectsTriangle(ray, polygon.triangle, _v1);\n            if (result) {\n                const newdistance = vec3.distance(result, ray.origin);\n                if (distance > newdistance) {\n                    distance = newdistance;\n                }\n                if (distance < 1e100) {\n                    intersects.push({ distance, polygon, position: vec3.add(vec3.create(), result, ray.origin) });\n                }\n            }\n        }\n\n        intersects.length && intersects.sort(raycastIntersectAscSort);\n        return intersects;\n    }\n\n    getIntersectingPolygons(polygons: Polygon[] = []) {\n        for(const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                if (polygon.valid && polygon.intersects) {\n                    polygons.push(polygon);\n                }\n            }\n        }\n\n        return polygons;\n    }\n\n    getPolygons(polygons: Polygon[] = []) {\n        for(const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                if (polygon.valid && polygons.indexOf(polygon) === -1) {\n                    polygons.push(polygon);\n                }\n            }\n        }\n\n        return polygons;\n    }\n\n    invert() {\n        for(const polygonsArray of this.polygonArrays) {\n            for(const polygon of polygonsArray) {\n                if (polygon.valid) {\n                    polygon.flip();\n                }\n            }\n        }\n    }\n\n    protected replacePolygon(polygon: Polygon, newPolygons: Polygon[] | Polygon) {\n        if (!Array.isArray(newPolygons)) {\n            newPolygons = [newPolygons];\n        }\n\n        if (this.polygons.length > 0) {\n            const polygonIndex = this.polygons.indexOf(polygon);\n            if (polygonIndex > -1) {\n                if (polygon.originalValid) {\n                    this.replacedPolygons.push(polygon);\n                } else {\n                    polygon.setInvalid();\n                }\n\n                this.polygons.splice(polygonIndex, 1, ...newPolygons);\n            }\n        }\n\n        for (const subTree of this.subTrees) {\n            subTree.replacePolygon(polygon, newPolygons);\n        }\n    }\n\n    protected deletePolygonsByStateRules(rulesArr: CSGRulesArray, firstRun = true) {\n        for(const polygonsArray of this.polygonArrays) {\n            if (polygonsArray.length === 0) {\n                continue;\n            }\n\n            for(const polygon of polygonsArray.slice()) {\n                if (!polygon.valid || !polygon.intersects) {\n                    continue;\n                }\n\n                let found = false;\n                for (const rule of rulesArr) {\n                    if (rule.array) {\n                        const states = rule.rule;\n                        if (states.includes(polygon.state) && (((polygon.previousState !== PolygonState.Undecided) && (states.includes(polygon.previousState))) || polygon.previousState === PolygonState.Undecided)) {\n                            found = true;\n                            const missingStates = new Set<PolygonState>();\n\n                            for(const state of states) {\n                                missingStates.add(state);\n                            }\n\n                            missingStates.delete(polygon.state);\n\n                            for (const previousState of polygon.previousStates) {\n                                if (!states.includes(previousState)) { // if previous state not one of provided states (not included in states array), break\n                                    found = false;\n                                    break;\n                                } else {\n                                    missingStates.delete(previousState);\n                                }\n                            }\n\n                            if (found) {\n                                if (missingStates.size > 0) {\n                                    found = false;\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (polygon.checkAllStates(rule.rule)) {\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (found) {\n                    const polygonIndex = polygonsArray.indexOf(polygon);\n                    if (polygonIndex > -1) {\n                        polygon.setInvalid();\n                        polygonsArray.splice(polygonIndex, 1);\n                    }\n\n                    if (firstRun) {\n                        polygon.delete();\n                    }\n                }\n            }\n        }\n    }\n\n    protected deletePolygonsByIntersection(intersects: boolean, firstRun = true) {\n        for(const polygonsArray of this.polygonArrays) {\n            if (polygonsArray.length === 0) {\n                continue;\n            }\n\n            for(const polygon of polygonsArray.slice()) {\n                if (polygon.valid && polygon.intersects === intersects) {\n                    const polygonIndex = polygonsArray.indexOf(polygon);\n                    if (polygonIndex > -1) {\n                        polygon.setInvalid();\n                        polygonsArray.splice(polygonIndex, 1);\n                    }\n\n                    if (firstRun) {\n                        polygon.delete();\n                    }\n                }\n            }\n        }\n    }\n\n    isPolygonIntersecting(polygon: Polygon) {\n        if (!this.box) {\n            throw new Error('Octree has no box');\n        }\n\n        return this.box.intersectsTriangle(polygon.triangle);\n    }\n\n    protected markIntersectingPolygons(targetOctree: OctreeCSG) {\n        for(const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                polygon.intersects = targetOctree.isPolygonIntersecting(polygon);\n            }\n        }\n    }\n\n    protected resetPolygons(resetOriginal = true) {\n        for(const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                polygon.reset(resetOriginal);\n            }\n        }\n    }\n\n    protected handleIntersectingPolygons(targetOctree: OctreeCSG, targetOctreeBuffer?: Float32Array) {\n        if (OctreeCSG.useWindingNumber && !targetOctreeBuffer) {\n            throw new Error('targetOctreeBuffer must be set if using winding number');\n        }\n\n        if (this.polygons.length > 0) {\n            let polygonStack = this.polygons.filter(polygon => polygon.valid && polygon.intersects && polygon.state === PolygonState.Undecided);\n\n            let currentPolygon;\n            while ((currentPolygon = polygonStack.pop())) { // XXX assignment is on purpose\n                if (currentPolygon.state !== PolygonState.Undecided || !currentPolygon.valid) {\n                    continue;\n                }\n\n                const targetPolygons = targetOctree.getPolygonsIntersectingPolygon(currentPolygon);\n                for (const target of targetPolygons) {\n                    const splitResults = splitPolygonByPlane(currentPolygon, target.plane);\n\n                    if (splitResults.length > 1) {\n                        for (const result of splitResults) {\n                            const polygon = result.polygon;\n                            polygon.intersects = currentPolygon.intersects;\n                            polygon.newPolygon = true;\n                            polygonStack.push(polygon);\n                        }\n\n                        this.replacePolygon(currentPolygon, splitResults.map(result => result.polygon));\n                        break;\n                    } else {\n                        const singleResult = splitResults[0];\n\n                        if (currentPolygon.id !== singleResult.polygon.id) {\n                            singleResult.polygon.intersects = currentPolygon.intersects;\n                            singleResult.polygon.newPolygon = true;\n                            polygonStack.push(singleResult.polygon);\n                            this.replacePolygon(currentPolygon, singleResult.polygon);\n                            break;\n                        } else if (singleResult.type === ReturnPolygonType.CoplanarFront || singleResult.type === ReturnPolygonType.CoplanarBack) {\n                            // XXX conversion from ReturnPolygonType to PolygonState is intentional\n                            // the values of CoplanarFront and CoplanarBack match by definition for both enums\n                            currentPolygon.setState(singleResult.type as unknown as PolygonState);\n                            currentPolygon.coplanar = true;\n                        }\n                    }\n                }\n            }\n\n            polygonStack = this.polygons.filter(polygon => polygon.valid && polygon.intersects);\n            let inside = false;\n\n            while ((currentPolygon = polygonStack.pop())) { // XXX assignment is on purpose\n                if (!currentPolygon.valid) {\n                    continue;\n                }\n\n                if (!targetOctree.box) {\n                    throw new Error('Octree has no box');\n                }\n\n                inside = false;\n                if (targetOctree.box.containsPoint(currentPolygon.midpoint)) {\n                    if (OctreeCSG.useWindingNumber) {\n                        inside = polyInside_WindingNumber_buffer(targetOctreeBuffer as Float32Array, currentPolygon.midpoint, currentPolygon.coplanar);\n                    } else {\n                        const point = pointRounding(vec3.copy(_v2, currentPolygon.midpoint));\n\n                        vec3.copy(_ray.origin, point);\n                        vec3.copy(_rayDirection, currentPolygon.plane.unsafeNormal);\n                        vec3.copy(_ray.direction, currentPolygon.plane.unsafeNormal);\n\n                        let intersects = targetOctree.rayIntersect(_ray);\n                        if (intersects.length > 0 && vec3.dot(_rayDirection, intersects[0].polygon.plane.unsafeNormal) > 0) {\n                            inside = true;\n                        } else if (currentPolygon.coplanar) {\n                            for (const _wP_EPS of _wP_EPS_ARR) {\n                                vec3.add(_ray.origin, point, _wP_EPS);\n                                vec3.copy(_rayDirection, currentPolygon.plane.unsafeNormal);\n                                vec3.copy(_ray.direction, currentPolygon.plane.unsafeNormal);\n\n                                intersects = targetOctree.rayIntersect(_ray);\n                                if (intersects.length > 0 && vec3.dot(_rayDirection, intersects[0].polygon.plane.unsafeNormal) > 0) {\n                                    inside = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                currentPolygon.setState(inside ? PolygonState.Inside : PolygonState.Outside);\n            }\n        }\n\n        for (const subTree of this.subTrees) {\n            subTree.handleIntersectingPolygons(targetOctree, targetOctreeBuffer);\n        }\n    }\n\n    delete(deletePolygons = true) {\n        if (this.polygons.length > 0 && deletePolygons) {\n            for (const polygon of this.polygons) {\n                polygon.delete();\n            }\n\n            this.polygons.length = 0;\n        }\n\n        if (this.replacedPolygons.length > 0 && deletePolygons) {\n            for (const polygon of this.replacedPolygons) {\n                polygon.delete();\n            }\n\n            this.replacedPolygons.length = 0;\n        }\n\n        if (this.polygonArrays) {\n            this.polygonArrays.length = 0;\n        }\n\n        if (this.subTrees.length) {\n            for (const subTree of this.subTrees) {\n                subTree.delete(deletePolygons);\n            }\n\n            this.subTrees.length = 0;\n        }\n\n        this.box = undefined;\n        this.parent = null;\n        this.level = 0;\n    }\n\n    dispose(deletePolygons = true) {\n        this.delete(deletePolygons);\n    }\n\n    protected getPolygonCloneCallback(cbFunc: (polygon: Polygon, triangleHasher: TriangleHasher) => unknown, triangleHasher: TriangleHasher) {\n        for (const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                if (polygon.valid) {\n                    cbFunc(polygon.clone(), triangleHasher);\n                }\n            }\n        }\n    }\n\n    protected deleteReplacedPolygons() {\n        if (this.replacedPolygons.length > 0) {\n            for (const polygon of this.replacedPolygons) {\n                polygon.delete();\n            }\n\n            this.replacedPolygons.length = 0;\n        }\n\n        for (const subTree of this.subTrees) {\n            subTree.deleteReplacedPolygons();\n        }\n    }\n\n    protected markPolygonsAsOriginal() {\n        for(const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                polygon.originalValid = true;\n            }\n        }\n    }\n\n    applyMatrix(matrix: mat4, normalMatrix?: mat3, firstRun = true) {\n        if (this.box) {\n            this.box = undefined;\n        }\n\n        if (!normalMatrix) {\n            normalMatrix = mat3.normalFromMat4(tmpm3, matrix);\n        }\n\n        for (const polygon of this.polygons) {\n            if (polygon.valid) {\n                polygon.applyMatrix(matrix, normalMatrix);\n            }\n        }\n\n        for (const subTree of this.subTrees) {\n            subTree.applyMatrix(matrix, normalMatrix, false);\n        }\n\n        if (firstRun) {\n            this.processTree();\n        }\n    }\n\n    setPolygonIndex(index: number) {\n        if (index === undefined) {\n            return;\n        }\n\n        for(const polygonsArray of this.polygonArrays) {\n            for (const polygon of polygonsArray) {\n                polygon.shared = index;\n            }\n        }\n    }\n\n    // utils from OctreeCSG.extended.js\n    getTriangles(triangles: Triangle[] = []) {\n        for (const polygon of this.getPolygons()) {\n            triangles.push(polygon.triangle)\n        }\n\n        return triangles;\n    }\n\n    getRayTriangles(ray: Ray, triangles: Triangle[] = []) {\n        for (const polygon of this.getRayPolygons(ray)) {\n            triangles.push(polygon.triangle)\n        }\n\n        return triangles;\n    }\n\n    /*\n    Union:\n    1. Delete all polygons in A that are:\n        a. inside and coplanar-back\n        b. inside\n    2. Delete all polygons in B that are:\n        a. inside and coplanar-back\n        b. inside and coplanar-front\n        c. inside\n    */\n    static union(octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true) {\n        if (!octreeA.box) {\n            octreeA.buildTree();\n        }\n\n        if (!octreeB.box) {\n            octreeB.buildTree();\n        }\n\n        const octree = new OctreeCSG();\n        const triangleHasher = new TriangleHasher();\n\n        if ((octreeA.box as Box3).intersectsBox(octreeB.box as Box3)) {\n            octreeA.resetPolygons(false);\n            octreeB.resetPolygons(false);\n\n            octreeA.markIntersectingPolygons(octreeB);\n            octreeB.markIntersectingPolygons(octreeA);\n\n            OctreeCSG.handleIntersectingOctrees(octreeA, octreeB);\n            octreeA.deleteReplacedPolygons();\n            octreeB.deleteReplacedPolygons();\n\n            octreeA.deletePolygonsByStateRules(CSG_Rules.union.a);\n            octreeB.deletePolygonsByStateRules(CSG_Rules.union.b);\n        }\n\n        octreeA.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n        octreeB.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n\n        triangleHasher.clear();\n\n        octree.markPolygonsAsOriginal();\n\n        if (buildTargetOctree) {\n            octree.buildTree();\n        }\n\n        return octree;\n    }\n\n    /*\n    Subtract:\n    1. Delete all polygons in A that are:\n        a. inside and coplanar-back\n        b. inside and coplanar-front\n        c. inside\n    2. Delete all polygons in B that are:\n        a. outside and coplanar-back\n        b. outside and coplanar-front\n        c. inside and coplanar-front\n        d. outside\n    */\n    static subtract(octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true) {\n        if (!octreeA.box) {\n            octreeA.buildTree();\n        }\n\n        if (!octreeB.box) {\n            octreeB.buildTree();\n        }\n\n        const octree = new OctreeCSG();\n        const triangleHasher = new TriangleHasher();\n\n        if ((octreeA.box as Box3).intersectsBox(octreeB.box as Box3)) {\n            octreeA.resetPolygons(false);\n            octreeB.resetPolygons(false);\n            octreeA.markIntersectingPolygons(octreeB);\n            octreeB.markIntersectingPolygons(octreeA);\n\n\n            OctreeCSG.handleIntersectingOctrees(octreeA, octreeB);\n            octreeA.deleteReplacedPolygons();\n            octreeB.deleteReplacedPolygons();\n\n            octreeA.deletePolygonsByStateRules(CSG_Rules.subtract.a);\n            octreeB.deletePolygonsByStateRules(CSG_Rules.subtract.b);\n\n\n            octreeB.deletePolygonsByIntersection(false);\n\n            octreeB.invert();\n\n            octreeA.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n            octreeB.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n        }\n        else {\n            octreeA.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n        }\n\n        triangleHasher.clear();\n\n        octree.markPolygonsAsOriginal();\n\n        if (buildTargetOctree) {\n            octree.buildTree();\n        }\n\n        return octree;\n    }\n\n    /*\n    Intersect:\n    1. Delete all polygons in A that are:\n        a. inside and coplanar-back\n        b. outside and coplanar-front\n        c. outside and coplanar-back\n        d. outside\n    2. Delete all polygons in B that are:\n        a. inside and coplanar-front\n        b. inside and coplanar-back\n        c. outside and coplanar-front\n        d. outside and coplanar-back\n        e. outside\n    */\n    static intersect(octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true) {\n        if (!octreeA.box) {\n            octreeA.buildTree();\n        }\n\n        if (!octreeB.box) {\n            octreeB.buildTree();\n        }\n\n        const octree = new OctreeCSG();\n        const triangleHasher = new TriangleHasher();\n\n        if ((octreeA.box as Box3).intersectsBox(octreeB.box as Box3)) {\n            octreeA.resetPolygons(false);\n            octreeB.resetPolygons(false);\n\n            octreeA.markIntersectingPolygons(octreeB);\n            octreeB.markIntersectingPolygons(octreeA);\n\n            OctreeCSG.handleIntersectingOctrees(octreeA, octreeB);\n            octreeA.deleteReplacedPolygons();\n            octreeB.deleteReplacedPolygons();\n\n            octreeA.deletePolygonsByStateRules(CSG_Rules.intersect.a);\n            octreeB.deletePolygonsByStateRules(CSG_Rules.intersect.b);\n\n            octreeA.deletePolygonsByIntersection(false);\n            octreeB.deletePolygonsByIntersection(false);\n\n            octreeA.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n            octreeB.getPolygonCloneCallback(octree.addPolygon.bind(octree), triangleHasher);\n        }\n\n        triangleHasher.clear();\n\n        octree.markPolygonsAsOriginal();\n\n        if (buildTargetOctree) {\n            octree.buildTree();\n        }\n\n        return octree;\n    }\n\n    static unionArray(objArr: OctreeCSG[], materialIndexMax = Infinity) {\n        return arrayOperation(OctreeCSG.union, objArr, materialIndexMax);\n    }\n\n    static subtractArray(objArr: OctreeCSG[], materialIndexMax = Infinity) {\n        // XXX subtraction is a special case; the leftmost element is subtracted\n        // with everything from the right, which means that:\n        // subtractArray(0 ... N) = subtract(0, union(1 ... N))\n        const objArrCount = objArr.length;\n        if (objArrCount === 0) {\n            throw new Error('Unable to find any result octree');\n        } else if (objArrCount === 1) {\n            return objArr[0];\n        } else if (objArrCount === 2) {\n            return OctreeCSG.subtract(objArr[0], objArr[1]);\n        } else {\n            return OctreeCSG.subtract(objArr[0], OctreeCSG.unionArray(objArr.slice(1), materialIndexMax));\n        }\n    }\n\n    static intersectArray(objArr: OctreeCSG[], materialIndexMax = Infinity) {\n        return arrayOperation(OctreeCSG.intersect, objArr, materialIndexMax);\n    }\n\n    static operation(obj: OctreeCSGObject, buildTargetOctree = true) {\n        let resultOctree: OctreeCSG;\n\n        switch (obj.op) {\n            case 'union':\n            case 'subtract':\n            case 'intersect':\n            {\n                const octreeA = handleObjectForOp(obj.objA, buildTargetOctree);\n                const octreeB = handleObjectForOp(obj.objB, buildTargetOctree);\n\n                switch (obj.op) {\n                    case 'union':\n                        resultOctree = OctreeCSG.union(octreeA, octreeB, buildTargetOctree);\n                        break;\n                    case 'subtract':\n                        resultOctree = OctreeCSG.subtract(octreeA, octreeB, buildTargetOctree);\n                        break;\n                    default:\n                        resultOctree = OctreeCSG.intersect(octreeA, octreeB, buildTargetOctree);\n                }\n\n                disposeOctree(octreeA, octreeB);\n                break;\n            }\n            case 'unionArray':\n            case 'subtractArray':\n            case 'intersectArray':\n            {\n                const octrees = new Array<OctreeCSG>();\n\n                for (const octreeObj of obj.objs) {\n                    octrees.push(handleObjectForOp(octreeObj, buildTargetOctree));\n                }\n\n                // TODO materialIndexMax?\n                switch (obj.op) {\n                    case 'unionArray':\n                        resultOctree = OctreeCSG.unionArray(octrees);\n                        break;\n                    case 'subtractArray':\n                        resultOctree = OctreeCSG.subtractArray(octrees);\n                        break;\n                    default:\n                        resultOctree = OctreeCSG.intersectArray(octrees);\n                }\n\n                disposeOctree(...octrees);\n                break;\n            }\n            default:\n                throw new Error(`Unknown operation: ${(obj as {op: unknown}).op}`);\n        }\n\n        return resultOctree;\n    }\n\n    static async = {\n        batchSize: 100,\n\n        async union(octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true): Promise<OctreeCSG> {\n            return asyncOperation('union', OctreeCSG.union, octreeA, octreeB, buildTargetOctree);\n        },\n\n        subtract(octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true): Promise<OctreeCSG> {\n            return asyncOperation('subtract', OctreeCSG.subtract, octreeA, octreeB, buildTargetOctree);\n        },\n\n        intersect(octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true): Promise<OctreeCSG> {\n            return asyncOperation('intersect', OctreeCSG.intersect, octreeA, octreeB, buildTargetOctree);\n        },\n\n        unionArray(objArr: OctreeCSG[], materialIndexMax = Infinity): Promise<OctreeCSG> {\n            return asyncArrayOperation(OctreeCSG.async.union, OctreeCSG.async.unionArray, objArr, materialIndexMax);\n        },\n\n        async subtractArray(objArr: OctreeCSG[], materialIndexMax = Infinity): Promise<OctreeCSG> {\n            // XXX subtraction is a special case; the leftmost element is\n            // subtracted with everything from the right, which means that:\n            // subtractArray(0 ... N) = subtract(0, union(1 ... N))\n            const objArrCount = objArr.length;\n            if (objArrCount === 0) {\n                throw new Error('Unable to find any result octree');\n            } else if (objArrCount === 1) {\n                return objArr[0];\n            } else if (objArrCount === 2) {\n                return await OctreeCSG.async.subtract(objArr[0], objArr[1]);\n            } else {\n                return await OctreeCSG.async.subtract(objArr[0], await OctreeCSG.async.unionArray(objArr.slice(1), materialIndexMax));\n            }\n        },\n\n        intersectArray(objArr: OctreeCSG[], materialIndexMax = Infinity): Promise<OctreeCSG> {\n            return asyncArrayOperation(OctreeCSG.async.intersect, OctreeCSG.async.intersectArray, objArr, materialIndexMax);\n        },\n\n        operation(obj: OctreeCSGObject, buildTargetOctree = true): Promise<OctreeCSG> {\n            return new Promise((resolve, reject) => {\n                try {\n                    switch (obj.op) {\n                        case 'union':\n                        case 'subtract':\n                        case 'intersect':\n                        {\n                            let octreeA: OctreeCSG, octreeB: OctreeCSG;\n                            const promises = [];\n                            if (obj.objA) {\n                                promises.push(handleObjectForOp_async(obj.objA, buildTargetOctree, 0));\n                            }\n\n                            if (obj.objB) {\n                                promises.push(handleObjectForOp_async(obj.objB, buildTargetOctree, 1));\n                            }\n\n                            Promise.allSettled(promises).then(results => {\n                                for (const result of results) {\n                                    if (result.status === 'fulfilled') {\n                                        const [csg, objIndex] = result.value;\n                                        if (objIndex === 0) {\n                                            octreeA = csg;\n                                        } else if (objIndex === 1) {\n                                            octreeB = csg;\n                                        }\n                                    }\n                                }\n\n                                let resultPromise;\n                                switch (obj.op) {\n                                    case 'union':\n                                        resultPromise = OctreeCSG.async.union(octreeA, octreeB, buildTargetOctree);\n                                        break;\n                                    case 'subtract':\n                                        resultPromise = OctreeCSG.async.subtract(octreeA, octreeB, buildTargetOctree);\n                                        break;\n                                    default:\n                                        resultPromise = OctreeCSG.async.intersect(octreeA, octreeB, buildTargetOctree);\n                                }\n\n                                resultPromise.then(resultOctree => {\n                                    resolve(resultOctree);\n                                    disposeOctree(octreeA, octreeB);\n                                }).catch(e => reject(e));\n                            });\n                            break;\n                        }\n                        case 'unionArray':\n                        case 'subtractArray':\n                        case 'intersectArray':\n                        {\n                            const octrees = new Array<OctreeCSG>();\n\n                            for (const octreeObj of obj.objs) {\n                                octrees.push(handleObjectForOp(octreeObj, buildTargetOctree));\n                            }\n\n                            // TODO materialIndexMax?\n                            let promise;\n                            switch (obj.op) {\n                                case 'unionArray':\n                                    promise = OctreeCSG.async.unionArray(octrees);\n                                    break;\n                                case 'subtractArray':\n                                    promise = OctreeCSG.async.subtractArray(octrees);\n                                    break;\n                                default:\n                                    promise = OctreeCSG.async.intersectArray(octrees);\n                            }\n\n                            disposeOctree(...octrees);\n\n                            promise.then(resultOctree => resolve(resultOctree));\n                            break;\n                        }\n                        default:\n                            throw new Error(`Unknown operation: ${(obj as {op: unknown}).op}`);\n                    }\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        }\n    }\n\n    protected static handleIntersectingOctrees(octreeA: OctreeCSG, octreeB: OctreeCSG, bothOctrees = true, octreeA_buffer?: Float32Array, octreeB_buffer?: Float32Array) {\n        if (OctreeCSG.useWindingNumber) {\n            if (bothOctrees && !octreeA_buffer) {\n                octreeA_buffer = prepareTriangleBuffer(octreeA.getPolygons());\n            }\n\n            if (!octreeB_buffer) {\n                octreeB_buffer = prepareTriangleBuffer(octreeB.getPolygons());\n            }\n        }\n\n        octreeA.handleIntersectingPolygons(octreeB, octreeB_buffer);\n\n        if (bothOctrees) {\n            octreeB.handleIntersectingPolygons(octreeA, octreeA_buffer);\n        }\n\n        if (octreeA_buffer !== undefined) {\n            octreeA_buffer = undefined;\n            octreeB_buffer = undefined;\n        }\n    }\n}\n\nfunction raycastIntersectAscSort(a: RayIntersect, b: RayIntersect) {\n    return a.distance - b.distance;\n}\n\nfunction handleObjectForOp(obj: OctreeCSG | OctreeCSGObject, buildTargetOctree: boolean) {\n    if (obj instanceof OctreeCSG) {\n        return obj;\n    } else if (obj.op) {\n        return OctreeCSG.operation(obj, buildTargetOctree);\n    } else {\n        throw new Error('Invalid OctreeCSG operation object');\n    }\n}\n\nfunction handleObjectForOp_async(obj: OctreeCSG | OctreeCSGObject, buildTargetOctree: boolean, objIndex: number): Promise<[csg: OctreeCSG, objIndex: number]> {\n    return new Promise((resolve, reject) => {\n        try {\n            if (obj instanceof OctreeCSG) {\n                resolve([obj, objIndex]);\n            } else if (obj.op) {\n                OctreeCSG.async.operation(obj, buildTargetOctree).then(returnObj => {\n                    resolve([returnObj, objIndex]);\n                });\n            } else {\n                throw new Error('Invalid OctreeCSG operation object');\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n\nfunction disposeOctree(...octrees: OctreeCSG[]) {\n    if (OctreeCSG.disposeOctree) {\n        for (const octree of octrees) {\n            octree.delete();\n        }\n    }\n}\n\nfunction handlePolygonArrayIntersections(targetPolygon: Polygon, outputPolygons: Polygon[], polygons: Polygon[]) {\n    for (const polygon of polygons) {\n        if (polygon.originalValid && polygon.valid && polygon.intersects && checkTrianglesIntersection(targetPolygon.triangle, polygon.triangle)) {\n            outputPolygons.push(polygon);\n        }\n    }\n}\n\nfunction arrayOperation(callback: (octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree?: boolean) => OctreeCSG, objArr: OctreeCSG[], materialIndexMax: number) {\n    let octreesArray = new Array<OctreeCSG>();\n    const objArrLen = objArr.length;\n\n    for (let i = 0; i < objArrLen; i++) {\n        const tempOctree = objArr[i];\n        tempOctree.setPolygonIndex(i > materialIndexMax ? materialIndexMax : i);\n        octreesArray.push(tempOctree);\n    }\n\n    // XXX minimise the octree bounding box after each operation by applying an\n    // operation to pairs of octrees instead of applying it to the same octree\n    // over and over again (which results in a single octree with a giant\n    // bounding box), and trying to keep the same order. this works best when\n    // each octree in the array is ordered by their position\n    while (octreesArray.length > 1) {\n        const octreeCount = octreesArray.length;\n        const nextOctreeArray = new Array<OctreeCSG>();\n\n        // process pairs\n        let i = 0;\n        for (; i + 1 < octreeCount; i += 2) {\n            const octreeA = octreesArray[i];\n            const octreeB = octreesArray[i + 1];\n            const resultOctree = callback(octreeA, octreeB);\n            disposeOctree(octreeA, octreeB);\n            nextOctreeArray.push(resultOctree);\n        }\n\n        // add leftover octrees\n        if (i < octreeCount) {\n            nextOctreeArray.push(octreesArray[i]);\n        }\n\n        // next iteration array\n        octreesArray = nextOctreeArray;\n    }\n\n    if (octreesArray.length === 0) {\n        throw new Error('Unable to find any result octree');\n    }\n\n    return octreesArray[0];\n}\n\nasync function asyncOperation(op: 'union' | 'subtract' | 'intersect', syncCallback: (octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree?: boolean) => OctreeCSG, octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree = true): Promise<OctreeCSG> {\n    // try using async job dispatcher\n    if (globalThis.globalOctreeCSGJobDispatcher) {\n        try {\n            return await globalThis.globalOctreeCSGJobDispatcher.dispatch({\n                op,\n                objA: octreeA,\n                objB: octreeB,\n            })\n        } catch(error) {\n            let rethrow = true;\n            if (error instanceof JobError && error.failReason === JobFailReason.WorkerCreationFailure) {\n                console.warn('Queued job failed due to worker creation failure. Retrying synchronously');\n                rethrow = false;\n            }\n\n            if (rethrow) {\n                throw error;\n            }\n        }\n    }\n\n    // fall back to synchronous implementation\n    const result = syncCallback(octreeA, octreeB, buildTargetOctree);\n    disposeOctree(octreeA, octreeB);\n    return result;\n}\n\nfunction asyncArrayOperation(singleCallback: (octreeA: OctreeCSG, octreeB: OctreeCSG, buildTargetOctree?: boolean) => Promise<OctreeCSG>, arrayCallback: (objArr: OctreeCSG[], materialIndexMax?: number) => Promise<OctreeCSG>, objArr: OctreeCSG[], materialIndexMax: number): Promise<OctreeCSG> {\n    return new Promise((resolve, reject) => {\n        try {\n            const usingBatches = OctreeCSG.async.batchSize > 4 && OctreeCSG.async.batchSize < objArr.length;\n            let mainOctree: OctreeCSG;\n            let mainOctreeUsed = false;\n            const promises = [];\n\n            if (usingBatches) {\n                const batches = [];\n                let currentIndex = 0;\n\n                while (currentIndex < objArr.length) {\n                    batches.push(objArr.slice(currentIndex, currentIndex + OctreeCSG.async.batchSize));\n                    currentIndex += OctreeCSG.async.batchSize;\n                }\n\n                let batch;\n                while ((batch = batches.shift())) { // XXX assignment is on purpose\n                    promises.push(arrayCallback(batch, 0));\n                }\n\n                mainOctreeUsed = true;\n                objArr.length = 0;\n            } else {\n                const octreesArray: OctreeCSG[] = [];\n                const objArrLen = objArr.length;\n                for (let i = 0; i < objArrLen; i++) {\n                    const tempOctree = objArr[i];\n\n                    if (materialIndexMax > -1) {\n                        tempOctree.setPolygonIndex(i > materialIndexMax ? materialIndexMax : i);\n                    }\n\n                    octreesArray.push(tempOctree);\n                }\n\n                mainOctree = octreesArray.shift() as OctreeCSG;\n\n                let leftOverOctree;\n                const octreesArrayLen = octreesArray.length;\n                for (let i = 0; i < octreesArrayLen; i += 2) {\n                    if (i + 1 >= octreesArrayLen) {\n                        leftOverOctree = octreesArray[i];\n                        break;\n                    }\n\n                    promises.push(singleCallback(octreesArray[i], octreesArray[i + 1]));\n                }\n\n                if (leftOverOctree) {\n                    promises.push(singleCallback(mainOctree, leftOverOctree));\n                    mainOctreeUsed = true;\n                }\n            }\n\n            Promise.allSettled(promises).then(results => {\n                const octrees = new Array<OctreeCSG>();\n\n                for (const result of results) {\n                    if (result.status === 'fulfilled') {\n                        octrees.push(result.value);\n                    }\n                }\n\n                if (!mainOctreeUsed) {\n                    octrees.unshift(mainOctree);\n                }\n\n                if (octrees.length <= 0) {\n                    reject('Unable to find any result octree');\n                } else if (octrees.length === 1) {\n                    resolve(octrees[0]);\n                } else if (octrees.length > 3) {\n                    arrayCallback(octrees, usingBatches ? 0 : -1).then(result => {\n                        resolve(result);\n                    }).catch(e => reject(e));\n                } else {\n                    singleCallback(octrees[0], octrees[1]).then(result => {\n                        if (octrees.length === 3) {\n                            singleCallback(result, octrees[2]).then(innerResult => {\n                                resolve(innerResult);\n                            }).catch(e => reject(e));\n                        } else {\n                            resolve(result);\n                        }\n                    }).catch(e => reject(e));\n                }\n            });\n        } catch (e) {\n            reject(e);\n        }\n    });\n}", "import { vec3 } from 'gl-matrix';\n\nexport default class Vertex {\n    constructor(public pos: vec3, public normal: vec3) {}\n\n    clone() {\n        return new Vertex(vec3.clone(this.pos), vec3.clone(this.normal));\n    }\n\n    // Invert all orientation-specific data (e.g. vertex normal). Called when the\n    // orientation of a polygon is flipped.\n    flip() {\n        vec3.negate(this.normal, this.normal);\n    }\n\n    delete() {\n        (this.pos as unknown) = undefined;\n        (this.normal as unknown) = undefined;\n    }\n\n    // Create a new vertex between this vertex and `other` by linearly\n    // interpolating all properties using a parameter of `t`. Subclasses should\n    // override this to interpolate additional properties.\n    interpolate(other: Vertex, t: number) {\n        return new Vertex(\n            vec3.lerp(vec3.create(), this.pos, other.pos, t),\n            vec3.lerp(vec3.create(), this.normal, other.normal, t)\n        );\n    }\n}", "import OctreeCSG from '../base/OctreeCSG';\nimport { Polygon } from '../math/Polygon';\nimport Vertex from '../math/Vertex';\n\nexport default function decodeOctree(vertexBuffer: Float32Array, normalBuffer: Float32Array): OctreeCSG {\n    // sanitise buffer lengths\n    const bufferLen = vertexBuffer.length;\n    if (bufferLen % 9 !== 0) {\n        throw new Error('Vertex buffer length is not a multiple of 9');\n    }\n\n    if (normalBuffer.length % 9 !== 0) {\n        throw new Error('Normal buffer length is not a multiple of 9');\n    }\n\n    // decode octree\n    const octree = new OctreeCSG();\n\n    for (let i = 0; i < bufferLen;) {\n        const a = new Vertex(vertexBuffer.slice(i, i + 3), normalBuffer.slice(i, i + 3));\n        i += 3;\n        const b = new Vertex(vertexBuffer.slice(i, i + 3), normalBuffer.slice(i, i + 3));\n        i += 3;\n        const c = new Vertex(vertexBuffer.slice(i, i + 3), normalBuffer.slice(i, i + 3));\n        i += 3;\n\n        const newPolygon = new Polygon([a, b, c]);\n        newPolygon.originalValid = true;\n        octree.addPolygon(newPolygon);\n    }\n\n    return octree;\n}", "import encodeOctree from './worker/encode-octree';\nimport decodeOctree from './worker/decode-octree';\nimport OctreeCSG from './base/OctreeCSG';\n\nimport type { EncodedOctreeCSGObject, EncodedOctreeCSGObjectArgument } from './worker/EncodedOctreeCSGObject';\nimport type { OctreeCSGObject, OctreeCSGObjectArgument } from './base/OctreeCSGObject';\nimport type WorkerRequest from './worker/WorkerRequest';\nimport type JobResult from './worker/JobResult';\n\nfunction decodeOctreeCSGObject(obj: EncodedOctreeCSGObject): OctreeCSGObject {\n    switch (obj.op) {\n        case 'union':\n        case 'subtract':\n        case 'intersect':\n        {\n            return <OctreeCSGObject>{\n                op: obj.op,\n                objA: decodeOctreeCSGObjectOrCSG(obj.objA),\n                objB: decodeOctreeCSGObjectOrCSG(obj.objB),\n            }\n        }\n        case 'unionArray':\n        case 'subtractArray':\n        case 'intersectArray':\n        {\n            const decodedObjs = new Array<OctreeCSGObjectArgument>();\n\n            for (const octreeObj of obj.objs) {\n                decodedObjs.push(decodeOctreeCSGObjectOrCSG(octreeObj));\n            }\n\n            return <OctreeCSGObject>{\n                op: obj.op,\n                objs: decodedObjs,\n            }\n        }\n        default:\n            throw new Error(`Unknown operation: ${(obj as {op: unknown}).op}`);\n    }\n}\n\nfunction decodeOctreeCSGObjectOrCSG(obj: EncodedOctreeCSGObjectArgument): OctreeCSGObject | OctreeCSG {\n    if (Array.isArray(obj)) {\n        return decodeOctree(...obj);\n    } else {\n        return decodeOctreeCSGObject(obj);\n    }\n}\n\nglobalThis.onmessage = function(message: MessageEvent<WorkerRequest>) {\n    switch(message.data.type) {\n        case 'operation':\n        {\n            try {\n                const result = OctreeCSG.operation(\n                    decodeOctreeCSGObject(message.data.operation),\n                    false,\n                );\n\n                const transferables = new Array<ArrayBuffer>();\n                const [vertices, normals] = encodeOctree(result, transferables);\n\n                postMessage(<JobResult>{\n                    success: true,\n                    jobIndex: message.data.jobIndex,\n                    vertices,\n                    normals,\n                });\n            } catch(error) {\n                postMessage(<JobResult>{\n                    success: false,\n                    jobIndex: message.data.jobIndex,\n                    error,\n                });\n            }\n            break;\n        }\n        default:\n            console.error(`Unknown worker request type: ${message.data.type}`);\n    }\n}\n\npostMessage('initialized');"],
  "mappings": "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",
  "names": ["THIRD", "TAU", "HALF_PI", "EPSILON", "ARRAY_TYPE", "RANDOM", "degree", "y", "i", "mat3_exports", "__export", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromMat2d", "fromMat4", "fromQuat", "fromRotation", "fromScaling", "fromTranslation", "fromValues", "identity", "invert", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "normalFromMat4", "projection", "rotate", "scale", "set", "str", "sub", "subtract", "translate", "transpose", "create", "out", "ARRAY_TYPE", "fromMat4", "a", "clone", "copy", "fromValues", "m00", "m01", "m02", "m10", "m11", "m12", "m20", "m21", "m22", "set", "identity", "transpose", "a01", "a02", "a12", "invert", "a00", "a10", "a11", "a20", "a21", "a22", "b01", "b11", "b21", "det", "adjoint", "determinant", "multiply", "b", "b00", "b02", "b10", "b12", "b20", "b22", "translate", "v", "x", "y", "rotate", "rad", "s", "c", "scale", "fromTranslation", "fromRotation", "fromScaling", "fromMat2d", "fromQuat", "q", "z", "w", "x2", "y2", "z2", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "normalFromMat4", "a03", "a13", "a23", "a30", "a31", "a32", "a33", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "projection", "width", "height", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "EPSILON", "mul", "sub", "mat4_exports", "__export", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromQuat2", "fromRotation", "fromRotationTranslation", "fromRotationTranslationScale", "fromRotationTranslationScaleOrigin", "fromScaling", "fromTranslation", "fromValues", "fromXRotation", "fromYRotation", "fromZRotation", "frustum", "getRotation", "getScaling", "getTranslation", "identity", "invert", "lookAt", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "ortho", "orthoNO", "orthoZO", "perspective", "perspectiveFromFieldOfView", "perspectiveNO", "perspectiveZO", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "targetTo", "translate", "transpose", "create", "out", "ARRAY_TYPE", "clone", "a", "copy", "fromValues", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "set", "identity", "transpose", "a01", "a02", "a03", "a12", "a13", "a23", "invert", "a00", "a10", "a11", "a20", "a21", "a22", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "adjoint", "determinant", "multiply", "b", "b0", "b1", "b2", "b3", "translate", "v", "x", "y", "z", "scale", "rotate", "rad", "axis", "len", "s", "c", "t", "b12", "b20", "b21", "b22", "EPSILON", "rotateX", "rotateY", "rotateZ", "fromTranslation", "fromScaling", "fromRotation", "fromXRotation", "fromYRotation", "fromZRotation", "fromRotationTranslation", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "fromQuat2", "translation", "bx", "by", "bz", "bw", "ax", "ay", "az", "aw", "magnitude", "getTranslation", "mat", "getScaling", "getRotation", "scaling", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "fromRotationTranslationScale", "sx", "sy", "sz", "fromRotationTranslationScaleOrigin", "o", "ox", "oy", "oz", "out0", "out1", "out2", "out4", "out5", "out6", "out8", "out9", "out10", "fromQuat", "yx", "zx", "zy", "frustum", "left", "right", "bottom", "top", "near", "far", "rl", "tb", "nf", "perspectiveNO", "fovy", "aspect", "f", "perspective", "perspectiveZO", "perspectiveFromFieldOfView", "fov", "upTan", "downTan", "leftTan", "rightTan", "xScale", "yScale", "orthoNO", "lr", "bt", "ortho", "orthoZO", "lookAt", "eye", "center", "up", "x0", "x1", "y0", "y1", "z0", "z1", "eyex", "eyey", "eyez", "upx", "upy", "upz", "centerx", "centery", "centerz", "targetTo", "target", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a14", "a15", "b4", "b5", "b6", "b7", "b8", "b9", "b13", "b14", "b15", "mul", "sub", "quat_exports", "__export", "add", "calculateW", "clone", "conjugate", "copy", "create", "dot", "equals", "exactEquals", "exp", "fromEuler", "fromMat3", "fromValues", "getAngle", "getAxisAngle", "identity", "invert", "len", "length", "lerp", "ln", "mul", "multiply", "normalize", "pow", "random", "rotateX", "rotateY", "rotateZ", "rotationTo", "scale", "set", "setAxes", "setAxisAngle", "slerp", "sqlerp", "sqrLen", "squaredLength", "str", "vec3_exports", "__export", "add", "angle", "bezier", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "hermite", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotateX", "rotateY", "rotateZ", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "transformQuat", "zero", "create", "out", "ARRAY_TYPE", "clone", "a", "length", "x", "y", "z", "fromValues", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "ax", "ay", "az", "bx", "by", "bz", "lerp", "hermite", "c", "d", "t", "factorTimes2", "factor1", "factor2", "factor3", "factor4", "bezier", "inverseFactor", "inverseFactorTimesTwo", "random", "r", "RANDOM", "zScale", "transformMat4", "m", "w", "transformMat3", "transformQuat", "q", "qx", "qy", "qz", "qw", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "w2", "rotateX", "rad", "p", "rotateY", "rotateZ", "angle", "mag1", "mag2", "mag", "cosine", "zero", "str", "exactEquals", "equals", "a0", "a1", "a2", "b0", "b1", "b2", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "vec4_exports", "__export", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "out", "ARRAY_TYPE", "clone", "a", "fromValues", "x", "y", "z", "w", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "u", "v", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "lerp", "ax", "ay", "az", "aw", "random", "v1", "v2", "v3", "v4", "s1", "s2", "RANDOM", "d", "transformMat4", "m", "transformQuat", "q", "qx", "qy", "qz", "qw", "ix", "iy", "iz", "iw", "zero", "str", "exactEquals", "equals", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "create", "out", "ARRAY_TYPE", "identity", "setAxisAngle", "axis", "rad", "s", "getAxisAngle", "out_axis", "q", "EPSILON", "getAngle", "a", "b", "dotproduct", "dot", "multiply", "ax", "ay", "az", "aw", "bx", "by", "bz", "bw", "rotateX", "rotateY", "rotateZ", "calculateW", "x", "y", "z", "exp", "w", "r", "et", "ln", "t", "pow", "scale", "slerp", "omega", "cosom", "sinom", "scale0", "scale1", "random", "u1", "RANDOM", "u2", "u3", "sqrt1MinusU1", "sqrtU1", "invert", "a0", "a1", "a2", "a3", "invDot", "conjugate", "fromMat3", "m", "fTrace", "fRoot", "i", "j", "k", "fromEuler", "halfToRad", "sx", "cx", "sy", "cy", "sz", "cz", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "rotationTo", "tmpvec3", "xUnitVec3", "yUnitVec3", "cross", "sqlerp", "temp1", "temp2", "c", "d", "setAxes", "matr", "view", "right", "up", "vec2_exports", "__export", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat2", "transformMat2d", "transformMat3", "transformMat4", "zero", "create", "out", "ARRAY_TYPE", "clone", "a", "fromValues", "x", "y", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "z", "lerp", "ax", "ay", "random", "r", "RANDOM", "transformMat2", "m", "transformMat2d", "transformMat3", "transformMat4", "rotate", "rad", "p0", "p1", "sinC", "cosC", "angle", "x1", "y1", "x2", "y2", "mag", "cosine", "zero", "str", "exactEquals", "equals", "a0", "a1", "b0", "b1", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "_wV1", "vec3_exports", "_wV2", "_wV3", "_wP", "_wP_EPS_ARR", "_matrix3", "mat3_exports", "wNPI", "returnXYZ", "arr", "index", "calcWindingNumber_buffer", "trianglesArr", "point", "wN", "trianglesArrLen", "i", "lenA", "lenB", "lenC", "polyInside_WindingNumber_buffer", "coplanar", "_wP_EPS", "prepareTriangleBuffer", "polygons", "array", "bufferIndex", "polygon", "triangle", "prepareNormalBuffer", "polygons", "array", "bufferIndex", "polygon", "encodeOctree", "obj", "transferables", "vertexBuffer", "prepareTriangleBuffer", "normalBuffer", "_v1", "vec3_exports", "_v2", "_v3", "triangleIntersectsTriangle", "triangleA", "triangleB", "additionsIn", "additions", "p1", "q1", "r1", "p2", "q2", "r2", "N2", "dp1", "dq1", "dr1", "N1", "dp2", "dq2", "dr2", "tri_tri_intersection", "coplanar_tri_tri3d", "construct_intersection", "normal_1", "P1", "vec2_exports", "Q1", "R1", "P2", "Q2", "R2", "n_x", "n_y", "n_z", "tri_tri_overlap_test_2d", "ORIENT_2D", "ccw_tri_tri_intersection_2d", "a", "b", "c", "intersection_test_edge", "intersection_test_vertex", "alpha", "N", "lineIntersects", "line1", "line2", "points", "r", "q", "dotqr", "dotqs", "dotrs", "dotrr", "dotss", "denom", "t", "u", "p0", "onSegment", "intersects", "getLines", "triangle", "checkTrianglesIntersection", "triangle1", "triangle2", "triangleIntersects", "triangle1Lines", "triangle2Lines", "j", "Triangle", "a", "b", "c", "source", "destination", "vec3_exports", "THIRD", "other", "k", "data", "seed", "h", "view", "key", "tv0", "vec3_exports", "tv1", "tv2", "tmpm3", "mat3_exports", "tmpm4_0", "mat4_exports", "tmpm4_1", "tv0_2", "vec2_exports", "tv1_2", "tq0", "quat_exports", "Plane", "buffer", "normal", "w", "vec4_exports", "vec3_exports", "p", "a", "b", "c", "tv0", "tv1", "n", "_polygonID", "Polygon", "vertices", "shared", "_polygonID", "v", "Plane", "Triangle", "matrix", "normalMatrixIn", "normalMatrix", "mat3_exports", "tmpm3", "vec3_exports", "resetOriginal", "state", "keepState", "previousState", "polygon", "tmp", "ReturnPolygonType", "COPLANAR", "FRONT", "BACK", "SPANNING", "splitPolygonByPlane", "polygon", "plane", "result", "returnPolygon", "polygonType", "types", "vertex", "t", "vec3_exports", "type", "f", "b", "vertCount", "i", "j", "ti", "tj", "vi", "vj", "tv0", "v", "newPoly", "splitPolygonArr", "Polygon", "arr", "resultArr", "edge1", "vec3_exports", "edge2", "h", "s", "q", "RAY_EPSILON", "rayIntersectsTriangle", "ray", "triangle", "target", "a", "f", "u", "v", "t", "pointRounding", "point", "num", "_tv1", "vec3_exports", "_tv2", "_tv3", "_bxNorm", "_byNorm", "_bzNorm", "_lub", "_rub", "_luf", "_ruf", "_ldb", "_rdb", "_ldf", "_rdf", "_ba", "_cb", "_ac", "Box3", "min", "max", "point", "scalar", "points", "normal", "count", "dotProd", "boxAxisMin", "boxAxisMax", "vertices", "triEdge", "boxNormal", "triVerts", "boxVerts", "axis", "boxMin", "boxMax", "triMin", "triMax", "triangle", "triNorm", "Plane", "triOffset", "box", "ray", "tmax", "Ray", "vec3_exports", "JobError", "failReason", "originalError", "failMessage", "TriangleHasher", "triangle", "hash", "arr", "other", "CSG_Rules", "_v1", "vec3_exports", "_v2", "_v3", "_ray", "Ray", "_rayDirection", "_a", "_OctreeCSG", "box", "parent", "source", "p", "subTree", "array", "index", "polygon", "triangleHasher", "triangle", "Box3", "level", "subTrees", "halfsize", "x", "y", "z", "v", "found", "i", "subBox", "firstVertex", "targetPolygon", "polygons", "handlePolygonArrayIntersections", "ray", "replacedPolygon", "intersects", "distance", "result", "rayIntersectsTriangle", "newdistance", "raycastIntersectAscSort", "polygonsArray", "newPolygons", "polygonIndex", "rulesArr", "firstRun", "rule", "states", "missingStates", "state", "previousState", "targetOctree", "resetOriginal", "targetOctreeBuffer", "polygonStack", "currentPolygon", "targetPolygons", "target", "splitResults", "splitPolygonByPlane", "singleResult", "ReturnPolygonType", "inside", "polyInside_WindingNumber_buffer", "point", "pointRounding", "_wP_EPS", "_wP_EPS_ARR", "deletePolygons", "cbFunc", "matrix", "normalMatrix", "mat3_exports", "tmpm3", "triangles", "octreeA", "octreeB", "buildTargetOctree", "octree", "TriangleHasher", "CSG_Rules", "objArr", "materialIndexMax", "arrayOperation", "objArrCount", "obj", "resultOctree", "handleObjectForOp", "disposeOctree", "octrees", "octreeObj", "bothOctrees", "octreeA_buffer", "octreeB_buffer", "prepareTriangleBuffer", "OctreeCSG", "__async", "asyncOperation", "asyncArrayOperation", "resolve", "reject", "promises", "handleObjectForOp_async", "results", "csg", "objIndex", "resultPromise", "e", "promise", "a", "b", "returnObj", "outputPolygons", "checkTrianglesIntersection", "callback", "octreesArray", "objArrLen", "tempOctree", "octreeCount", "nextOctreeArray", "op", "syncCallback", "error", "rethrow", "JobError", "singleCallback", "arrayCallback", "usingBatches", "mainOctree", "mainOctreeUsed", "batches", "currentIndex", "batch", "leftOverOctree", "octreesArrayLen", "innerResult", "Vertex", "pos", "normal", "vec3_exports", "other", "t", "decodeOctree", "vertexBuffer", "normalBuffer", "bufferLen", "octree", "OctreeCSG", "i", "Vertex", "b", "newPolygon", "Polygon", "decodeOctreeCSGObject", "obj", "decodeOctreeCSGObjectOrCSG", "decodedObjs", "octreeObj", "decodeOctree", "message", "result", "OctreeCSG", "transferables", "vertices", "normals", "encodeOctree", "error"]
}
